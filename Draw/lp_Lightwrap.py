# -*- coding: utf-8 -*-
# DO NOT EDIT THIS FILE
# This file was automatically generated by Natron PyPlug exporter version 10.

# Hand-written code should be added in a separate file named lp_LightwrapExt.py
# See http://natron.readthedocs.org/en/master/groups.html#adding-hand-written-code-callbacks-etc
# Note that Viewers are never exported

import NatronEngine
import sys

# Try to import the extensions file where callbacks and hand-written code should be located.
try:
    from lp_LightwrapExt import *
except ImportError:
    pass

def getPluginID():
    return "lp_Lightwrap"

def getLabel():
    return "lp_Lightwrap"

def getVersion():
    return 1

def getGrouping():
    return "Draw"

def getPluginDescription():
    return "Advanced Lightwrap for fancy falloff, based on luminance of the background.\n\nINPUTS\nimg = connect the foreground you want to apply the effect to; an alpha channel is mandatory (premultiplication is not)\nbg = the background which should wrap around the foreground\nmask = masks the effect (not a simple Keymix, it interacts directly with the shape)\n\nHOW TO USE IT\nWhen you connected both mandatory inputs, you should already have a rather pleasing result. You can preview only the wrap on black to get a better idea of what you are achieving, adjust the parameters as needed; they should be self explanatory, but mind the tooltips if you need to.\nThe applied luma-matte of the background can be adjusted to optimize the effect, you can also preview only the luma matte to get a better view.\nThis PyPlug won\'t comp the foreground over the background, this has to be done in an additional step.\n\nHOW DOES IT WORK\nThe background gets premultiplied by the inverted alpha of the foreground and then blurred in different strengths to create a fancy falloff. Before the blurs, the layer gets also masked by the luma-matte of the background, so only bright areas will wrap around the foreground (you know, just like light works)."

def createInstance(app,group):
    # Create all nodes in the group

    # Create the parameters of the group node the same way we did for all internal nodes
    lastNode = group

    # Create the user parameters
    lastNode.Controls = lastNode.createPageParam("Controls", "Controls")
    param = lastNode.createBooleanParam("effectonly", "show wrap only")

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("Only shows the effect w/o the foreground.")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.effectonly = param
    del param

    param = lastNode.createChoiceParam("blending", "blend on foreground with")
    entries = [ ("over", ""),
    ("screen", ""),
    ("plus", "")]
    param.setOptions(entries)
    del entries
    param.setDefaultValue("screen")
    param.restoreDefaultValue()

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("Chooses with which blending-mode the wrap is applied to the foreground.")
    param.setAddNewLine(True)
    param.setAnimationEnabled(False)
    lastNode.blending = param
    del param

    param = lastNode.createChoiceParam("NoOp2glowblend", "blend layer with")
    param.setDefaultValue(1)
    param.restoreDefaultValue()

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("Chooses how the individual wrap-layers are blended together before they get applied to the foreground.")
    param.setAddNewLine(False)
    param.setAnimationEnabled(True)
    lastNode.NoOp2glowblend = param
    del param

    param = lastNode.createChoiceParam("glow1filter", "wrap filter")
    param.setDefaultValue(1)
    param.restoreDefaultValue()

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("Chooses the filter which is used by the individual wrap-layers.")
    param.setAddNewLine(True)
    param.setAnimationEnabled(False)
    lastNode.glow1filter = param
    del param

    param = lastNode.createSeparatorParam("sep01", "wrap appearance")

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp(" ")
    param.setAddNewLine(True)
    param.setPersistent(False)
    param.setEvaluateOnChange(False)
    lastNode.sep01 = param
    del param

    param = lastNode.createDouble2DParam("NoOp2glowradius", "wrap radius")
    param.setMinimum(-2147483648, 0)
    param.setMaximum(2147483647, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(200, 0)
    param.setDefaultValue(100, 0)
    param.restoreDefaultValue(0)
    param.setMinimum(-2147483648, 1)
    param.setMaximum(2147483647, 1)
    param.setDisplayMinimum(0, 1)
    param.setDisplayMaximum(200, 1)
    param.setDefaultValue(100, 1)
    param.restoreDefaultValue(1)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("Sets the radius of the wrap-operation. ")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.NoOp2glowradius = param
    del param

    param = lastNode.createDoubleParam("Merge2mix", "intensity")
    param.setMinimum(0, 0)
    param.setMaximum(1, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(5, 0)
    param.setDefaultValue(1, 0)
    param.restoreDefaultValue(0)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("Increases or decreases intensity of the wrap.")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.Merge2mix = param
    del param

    param = lastNode.createDoubleParam("wrapgamma", "gamma")
    param.setMinimum(-2147483648, 0)
    param.setMaximum(2147483647, 0)
    param.setDisplayMinimum(0.1, 0)
    param.setDisplayMaximum(3, 0)
    param.setDefaultValue(1, 0)
    param.restoreDefaultValue(0)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("Adjusts gamma of the wrap.")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.wrapgamma = param
    del param

    param = lastNode.createDoubleParam("wrapsaturation", "saturation")
    param.setMinimum(-2147483648, 0)
    param.setMaximum(2147483647, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(3, 0)
    param.setDefaultValue(1, 0)
    param.restoreDefaultValue(0)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("Adjusts saturation of the applied wrap.")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.wrapsaturation = param
    del param

    param = lastNode.createSeparatorParam("sep02", " ")

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp(" ")
    param.setAddNewLine(True)
    param.setPersistent(False)
    param.setEvaluateOnChange(False)
    lastNode.sep02 = param
    del param

    param = lastNode.createDouble2DParam("preblursize", "background pre-blur")
    param.setMinimum(0, 0)
    param.setMaximum(1000, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(50, 0)
    param.setDefaultValue(5, 0)
    param.restoreDefaultValue(0)
    param.setMinimum(0, 1)
    param.setMaximum(1000, 1)
    param.setDisplayMinimum(0, 1)
    param.setDisplayMaximum(50, 1)
    param.setDefaultValue(5, 1)
    param.restoreDefaultValue(1)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("Preblurs the background. Should not be off, as too much detail blending in your foreground usually looks really strange.")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.preblursize = param
    del param

    param = lastNode.createSeparatorParam("lumaadjust", "luma adjust")

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setPersistent(False)
    param.setEvaluateOnChange(False)
    lastNode.lumaadjust = param
    del param

    param = lastNode.createDoubleParam("lumalow", "black")
    param.setMinimum(-2147483648, 0)
    param.setMaximum(2147483647, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(1, 0)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("Adjusts black-point of the luma matte.")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.lumalow = param
    del param

    param = lastNode.createDoubleParam("lumahigh", "white")
    param.setMinimum(-2147483648, 0)
    param.setMaximum(2147483647, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(1, 0)
    param.setDefaultValue(1, 0)
    param.restoreDefaultValue(0)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("Adjusts white-point of the luma matte.")
    param.setAddNewLine(False)
    param.setAnimationEnabled(True)
    lastNode.lumahigh = param
    del param

    param = lastNode.createBooleanParam("previewluma", "preview luma matte")

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("Shows the luma matte of the background. Helpful for adjusting the threshold.")
    param.setAddNewLine(True)
    param.setAnimationEnabled(False)
    lastNode.previewluma = param
    del param

    param = lastNode.createBooleanParam("disableluma", "disable luma matte")

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("Disables the luminance based wrap; use with caution, the result usually looks silly.")
    param.setAddNewLine(False)
    param.setAnimationEnabled(False)
    lastNode.disableluma = param
    del param

    param = lastNode.createSeparatorParam("sep03", " ")

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp(" ")
    param.setAddNewLine(True)
    param.setPersistent(False)
    param.setEvaluateOnChange(False)
    lastNode.sep03 = param
    del param

    param = lastNode.createBooleanParam("invmask", "invert mask")

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("Inverts the connected mask.")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.invmask = param
    del param

    param = lastNode.createStringParam("credit", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("lp_Lightwrap v1.0\n(c) 2016 by lucas pfaff\ninspired by bm_Lightwrap, Ben McEwan")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.credit = param
    del param

    # Refresh the GUI with the newly created parameters
    lastNode.setPagesOrder(['Controls', 'Node', 'Info'])
    lastNode.refreshUserParamsGUI()
    del lastNode

    # Start of node "preblur"
    lastNode = app.createNode("net.sf.cimg.CImgBlur", 4, group)
    lastNode.setScriptName("preblur")
    lastNode.setLabel("preblur")
    lastNode.setPosition(3225, 316)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.8, 0.5, 0.3)
    grouppreblur = lastNode

    param = lastNode.getParam("size")
    if param is not None:
        param.setValue(5, 0)
        param.setValue(5, 1)
        del param

    param = lastNode.getParam("boundary")
    if param is not None:
        param.set("Nearest")
        del param

    param = lastNode.getParam("filter")
    if param is not None:
        param.set("Quasi-Gaussian")
        del param

    del lastNode
    # End of node "preblur"

    # Start of node "img"
    lastNode = app.createNode("fr.inria.built-in.Input", 1, group)
    lastNode.setScriptName("img")
    lastNode.setLabel("img")
    lastNode.setPosition(2501, -90)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.3, 0.5, 0.2)
    groupimg = lastNode

    del lastNode
    # End of node "img"

    # Start of node "Output1"
    lastNode = app.createNode("fr.inria.built-in.Output", 1, group)
    lastNode.setScriptName("Output1")
    lastNode.setLabel("Output1")
    lastNode.setPosition(2501, 3929)
    lastNode.setSize(104, 31)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupOutput1 = lastNode

    del lastNode
    # End of node "Output1"

    # Start of node "mask"
    lastNode = app.createNode("fr.inria.built-in.Input", 1, group)
    lastNode.setScriptName("mask")
    lastNode.setLabel("mask")
    lastNode.setPosition(2990, 584)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.3, 0.5, 0.2)
    groupmask = lastNode

    param = lastNode.getParam("optional")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("isMask")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "mask"

    # Start of node "bg"
    lastNode = app.createNode("fr.inria.built-in.Input", 1, group)
    lastNode.setScriptName("bg")
    lastNode.setLabel("bg")
    lastNode.setPosition(3225, 62)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.3, 0.5, 0.2)
    groupbg = lastNode

    del lastNode
    # End of node "bg"

    # Start of node "Shuffle1"
    lastNode = app.createNode("net.sf.openfx.ShufflePlugin", 2, group)
    lastNode.setScriptName("Shuffle1")
    lastNode.setLabel("Shuffle1")
    lastNode.setPosition(3225, 493)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.6, 0.24, 0.39)
    groupShuffle1 = lastNode

    param = lastNode.getParam("outputChannelsChoice")
    if param is not None:
        param.setValue("Color.RGBA")
        del param

    param = lastNode.getParam("outputR")
    if param is not None:
        param.set("B.r")
        del param

    param = lastNode.getParam("outputRChoice")
    if param is not None:
        param.setValue("B.r")
        del param

    param = lastNode.getParam("outputG")
    if param is not None:
        param.set("B.g")
        del param

    param = lastNode.getParam("outputGChoice")
    if param is not None:
        param.setValue("B.g")
        del param

    param = lastNode.getParam("outputB")
    if param is not None:
        param.set("B.b")
        del param

    param = lastNode.getParam("outputBChoice")
    if param is not None:
        param.setValue("B.b")
        del param

    param = lastNode.getParam("outputAChoice")
    if param is not None:
        param.setValue("A.a")
        del param

    del lastNode
    # End of node "Shuffle1"

    # Start of node "Dot1"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot1")
    lastNode.setLabel("Dot1")
    lastNode.setPosition(2546, 507)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot1 = lastNode

    del lastNode
    # End of node "Dot1"

    # Start of node "Invert1"
    lastNode = app.createNode("net.sf.openfx.Invert", 2, group)
    lastNode.setScriptName("Invert1")
    lastNode.setLabel("Invert1")
    lastNode.setPosition(3225, 620)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.48, 0.66, 1)
    groupInvert1 = lastNode

    param = lastNode.getParam("NatronOfxParamProcessR")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("NatronOfxParamProcessG")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("NatronOfxParamProcessB")
    if param is not None:
        param.setValue(False)
        del param

    del lastNode
    # End of node "Invert1"

    # Start of node "Merge1"
    lastNode = app.createNode("net.sf.openfx.MergePlugin", 1, group)
    lastNode.setScriptName("Merge1")
    lastNode.setLabel("Merge1")
    lastNode.setPosition(3225, 746)
    lastNode.setSize(104, 66)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupMerge1 = lastNode

    param = lastNode.getParam("NatronOfxParamStringSublabelName")
    if param is not None:
        param.setValue("mask")
        del param

    param = lastNode.getParam("operation")
    if param is not None:
        param.set("mask")
        del param

    del lastNode
    # End of node "Merge1"

    # Start of node "Dot2"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot2")
    lastNode.setLabel("Dot2")
    lastNode.setPosition(3035, 772)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot2 = lastNode

    del lastNode
    # End of node "Dot2"

    # Start of node "Invert2"
    lastNode = app.createNode("net.sf.openfx.Invert", 2, group)
    lastNode.setScriptName("Invert2")
    lastNode.setLabel("Invert2")
    lastNode.setPosition(2990, 670)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.48, 0.66, 1)
    groupInvert2 = lastNode

    param = lastNode.getParam("premult")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("disableNode")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "Invert2"

    # Start of node "Dot3"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot3")
    lastNode.setLabel("Dot3")
    lastNode.setPosition(3270, 401)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot3 = lastNode

    del lastNode
    # End of node "Dot3"

    # Start of node "Saturation1"
    lastNode = app.createNode("net.sf.openfx.SaturationPlugin", 2, group)
    lastNode.setScriptName("Saturation1")
    lastNode.setLabel("Saturation1")
    lastNode.setPosition(3473, 507)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.48, 0.66, 1)
    groupSaturation1 = lastNode

    param = lastNode.getParam("saturation")
    if param is not None:
        param.setValue(0, 0)
        del param

    param = lastNode.getParam("premult")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "Saturation1"

    # Start of node "Dot4"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot4")
    lastNode.setLabel("Dot4")
    lastNode.setPosition(3518, 401)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot4 = lastNode

    del lastNode
    # End of node "Dot4"

    # Start of node "Shuffle2"
    lastNode = app.createNode("net.sf.openfx.ShufflePlugin", 2, group)
    lastNode.setScriptName("Shuffle2")
    lastNode.setLabel("Shuffle2")
    lastNode.setPosition(3473, 627)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.6, 0.24, 0.39)
    groupShuffle2 = lastNode

    param = lastNode.getParam("outputChannelsChoice")
    if param is not None:
        param.setValue("Color.RGBA")
        del param

    param = lastNode.getParam("outputR")
    if param is not None:
        param.set("0")
        del param

    param = lastNode.getParam("outputRChoice")
    if param is not None:
        param.setValue("0")
        del param

    param = lastNode.getParam("outputG")
    if param is not None:
        param.set("0")
        del param

    param = lastNode.getParam("outputGChoice")
    if param is not None:
        param.setValue("0")
        del param

    param = lastNode.getParam("outputB")
    if param is not None:
        param.set("0")
        del param

    param = lastNode.getParam("outputBChoice")
    if param is not None:
        param.setValue("0")
        del param

    param = lastNode.getParam("outputA")
    if param is not None:
        param.set("A.g")
        del param

    param = lastNode.getParam("outputAChoice")
    if param is not None:
        param.setValue("A.g")
        del param

    del lastNode
    # End of node "Shuffle2"

    # Start of node "Grade1"
    lastNode = app.createNode("net.sf.openfx.GradePlugin", 2, group)
    lastNode.setScriptName("Grade1")
    lastNode.setLabel("Grade1")
    lastNode.setPosition(3473, 743)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.48, 0.66, 1)
    groupGrade1 = lastNode

    param = lastNode.getParam("NatronOfxParamProcessR")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("NatronOfxParamProcessG")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("NatronOfxParamProcessB")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("NatronOfxParamProcessA")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("blackPoint")
    if param is not None:
        param.setValue(0, 0)
        param.setValue(0, 1)
        param.setValue(0, 2)
        param.setValue(0, 3)
        del param

    param = lastNode.getParam("whitePoint")
    if param is not None:
        param.setValue(1, 0)
        param.setValue(1, 1)
        param.setValue(1, 2)
        param.setValue(1, 3)
        del param

    param = lastNode.getParam("clampWhite")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "Grade1"

    # Start of node "Merge1_2"
    lastNode = app.createNode("net.sf.openfx.MergePlugin", 1, group)
    lastNode.setScriptName("Merge1_2")
    lastNode.setLabel("Merge1_2")
    lastNode.setPosition(3225, 882)
    lastNode.setSize(104, 66)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupMerge1_2 = lastNode

    param = lastNode.getParam("NatronOfxParamStringSublabelName")
    if param is not None:
        param.setValue("mask")
        del param

    param = lastNode.getParam("operation")
    if param is not None:
        param.set("mask")
        del param

    param = lastNode.getParam("disableNode")
    if param is not None:
        param.setValue(False)
        del param

    del lastNode
    # End of node "Merge1_2"

    # Start of node "Dot5"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot5")
    lastNode.setLabel("Dot5")
    lastNode.setPosition(3518, 908)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot5 = lastNode

    del lastNode
    # End of node "Dot5"

    # Start of node "Premult1"
    lastNode = app.createNode("net.sf.openfx.Premult", 2, group)
    lastNode.setScriptName("Premult1")
    lastNode.setLabel("Premult1")
    lastNode.setPosition(3225, 972)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupPremult1 = lastNode

    del lastNode
    # End of node "Premult1"

    # Start of node "Dot6"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot6")
    lastNode.setLabel("Dot6")
    lastNode.setPosition(3270, 257)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot6 = lastNode

    del lastNode
    # End of node "Dot6"

    # Start of node "glow1"
    lastNode = app.createNode("net.sf.cimg.CImgBlur", 4, group)
    lastNode.setScriptName("glow1")
    lastNode.setLabel("glow1")
    lastNode.setPosition(3020, 1173)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.8, 0.5, 0.3)
    groupglow1 = lastNode

    param = lastNode.getParam("size")
    if param is not None:
        param.setValue(1, 0)
        param.setValue(1, 1)
        del param

    param = lastNode.getParam("boundary")
    if param is not None:
        param.set("Nearest")
        del param

    del lastNode
    # End of node "glow1"

    # Start of node "Dot7"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot7")
    lastNode.setLabel("Dot7")
    lastNode.setPosition(3270, 1187)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot7 = lastNode

    del lastNode
    # End of node "Dot7"

    # Start of node "ColorCorrect1"
    lastNode = app.createNode("net.sf.openfx.ColorCorrectPlugin", 2, group)
    lastNode.setScriptName("ColorCorrect1")
    lastNode.setLabel("ColorCorrect1")
    lastNode.setPosition(3020, 1257)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.48, 0.66, 1)
    groupColorCorrect1 = lastNode

    param = lastNode.getParam("MasterSaturation")
    if param is not None:
        param.setValue(1, 0)
        param.setValue(1, 1)
        param.setValue(1, 2)
        param.setValue(1, 3)
        del param

    param = lastNode.getParam("MasterGamma")
    if param is not None:
        param.setValue(1, 0)
        param.setValue(1, 1)
        param.setValue(1, 2)
        param.setValue(1, 3)
        del param

    param = lastNode.getParam("toneRanges")
    if param is not None:
        param.setCurveColor(0, 0.6, 0.4, 0.6)
        param.deleteAllControlPoints(0)
        param.addControlPoint(0, 0, 1, 0, 0, NatronEngine.Natron.KeyframeTypeEnum.eKeyframeTypeHorizontal)
        param.addControlPoint(0, 0.09, 0, 0, 0, NatronEngine.Natron.KeyframeTypeEnum.eKeyframeTypeHorizontal)
        param.setCurveColor(1, 0.8, 0.7, 0.6)
        param.deleteAllControlPoints(1)
        param.addControlPoint(1, 0.5, 0, 0, 0, NatronEngine.Natron.KeyframeTypeEnum.eKeyframeTypeHorizontal)
        param.addControlPoint(1, 1, 1, 0, 0, NatronEngine.Natron.KeyframeTypeEnum.eKeyframeTypeHorizontal)
        del param

    param = lastNode.getParam("premult")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "ColorCorrect1"

    # Start of node "Merge2"
    lastNode = app.createNode("net.sf.openfx.MergePlugin", 1, group)
    lastNode.setScriptName("Merge2")
    lastNode.setLabel("Merge2")
    lastNode.setPosition(2811, 1406)
    lastNode.setSize(104, 66)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupMerge2 = lastNode

    param = lastNode.getParam("NatronOfxParamStringSublabelName")
    if param is not None:
        param.setValue("screen")
        del param

    param = lastNode.getParam("operation")
    if param is not None:
        param.set("screen")
        del param

    param = lastNode.getParam("mix")
    if param is not None:
        param.setValue(1, 0)
        del param

    del lastNode
    # End of node "Merge2"

    # Start of node "Dot8"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot8")
    lastNode.setLabel("Dot8")
    lastNode.setPosition(2856, 1271)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot8 = lastNode

    del lastNode
    # End of node "Dot8"

    # Start of node "glow2"
    lastNode = app.createNode("net.sf.cimg.CImgBlur", 4, group)
    lastNode.setScriptName("glow2")
    lastNode.setLabel("glow2")
    lastNode.setPosition(3018, 1336)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.8, 0.5, 0.3)
    groupglow2 = lastNode

    param = lastNode.getParam("size")
    if param is not None:
        param.setValue(7.142857142857143, 0)
        param.setValue(7.142857142857143, 1)
        del param

    param = lastNode.getParam("boundary")
    if param is not None:
        param.set("Nearest")
        del param

    del lastNode
    # End of node "glow2"

    # Start of node "Dot9"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot9")
    lastNode.setLabel("Dot9")
    lastNode.setPosition(3270, 1350)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot9 = lastNode

    del lastNode
    # End of node "Dot9"

    # Start of node "Dot10"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot10")
    lastNode.setLabel("Dot10")
    lastNode.setPosition(2856, 2829)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot10 = lastNode

    del lastNode
    # End of node "Dot10"

    # Start of node "Merge3"
    lastNode = app.createNode("net.sf.openfx.MergePlugin", 1, group)
    lastNode.setScriptName("Merge3")
    lastNode.setLabel("Merge3")
    lastNode.setPosition(2501, 2803)
    lastNode.setSize(104, 66)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupMerge3 = lastNode

    del lastNode
    # End of node "Merge3"

    # Start of node "Dot11"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot11")
    lastNode.setLabel("Dot11")
    lastNode.setPosition(2546, 2378)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot11 = lastNode

    del lastNode
    # End of node "Dot11"

    # Start of node "Merge4"
    lastNode = app.createNode("net.sf.openfx.MergePlugin", 1, group)
    lastNode.setScriptName("Merge4")
    lastNode.setLabel("Merge4")
    lastNode.setPosition(2362, 2916)
    lastNode.setSize(104, 66)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupMerge4 = lastNode

    param = lastNode.getParam("NatronOfxParamStringSublabelName")
    if param is not None:
        param.setValue("screen")
        del param

    param = lastNode.getParam("operation")
    if param is not None:
        param.set("screen")
        del param

    del lastNode
    # End of node "Merge4"

    # Start of node "Dot12"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot12")
    lastNode.setLabel("Dot12")
    lastNode.setPosition(2407, 2656)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot12 = lastNode

    del lastNode
    # End of node "Dot12"

    # Start of node "Dot13"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot13")
    lastNode.setLabel("Dot13")
    lastNode.setPosition(2856, 2942)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot13 = lastNode

    del lastNode
    # End of node "Dot13"

    # Start of node "Merge5"
    lastNode = app.createNode("net.sf.openfx.MergePlugin", 1, group)
    lastNode.setScriptName("Merge5")
    lastNode.setLabel("Merge5")
    lastNode.setPosition(2226, 3032)
    lastNode.setSize(104, 66)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupMerge5 = lastNode

    param = lastNode.getParam("NatronOfxParamStringSublabelName")
    if param is not None:
        param.setValue("plus")
        del param

    param = lastNode.getParam("operation")
    if param is not None:
        param.set("plus")
        del param

    del lastNode
    # End of node "Merge5"

    # Start of node "Dot14"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot14")
    lastNode.setLabel("Dot14")
    lastNode.setPosition(2856, 3058)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot14 = lastNode

    del lastNode
    # End of node "Dot14"

    # Start of node "Dot15"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot15")
    lastNode.setLabel("Dot15")
    lastNode.setPosition(2271, 2656)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot15 = lastNode

    del lastNode
    # End of node "Dot15"

    # Start of node "Switch1"
    lastNode = app.createNode("net.sf.openfx.switchPlugin", 1, group)
    lastNode.setScriptName("Switch1")
    lastNode.setLabel("Switch1")
    lastNode.setPosition(2501, 3160)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupSwitch1 = lastNode

    param = lastNode.getParam("which")
    if param is not None:
        param.setValue(1, 0)
        del param

    del lastNode
    # End of node "Switch1"

    # Start of node "Dot16"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot16")
    lastNode.setLabel("Dot16")
    lastNode.setPosition(2271, 3174)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot16 = lastNode

    del lastNode
    # End of node "Dot16"

    # Start of node "Shuffle3"
    lastNode = app.createNode("net.sf.openfx.ShufflePlugin", 2, group)
    lastNode.setScriptName("Shuffle3")
    lastNode.setLabel("Shuffle3")
    lastNode.setPosition(2501, 3418)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.6, 0.24, 0.39)
    groupShuffle3 = lastNode

    param = lastNode.getParam("outputChannelsChoice")
    if param is not None:
        param.setValue("Color.RGBA")
        del param

    param = lastNode.getParam("outputR")
    if param is not None:
        param.set("B.r")
        del param

    param = lastNode.getParam("outputRChoice")
    if param is not None:
        param.setValue("B.r")
        del param

    param = lastNode.getParam("outputG")
    if param is not None:
        param.set("B.g")
        del param

    param = lastNode.getParam("outputGChoice")
    if param is not None:
        param.setValue("B.g")
        del param

    param = lastNode.getParam("outputB")
    if param is not None:
        param.set("B.b")
        del param

    param = lastNode.getParam("outputBChoice")
    if param is not None:
        param.setValue("B.b")
        del param

    param = lastNode.getParam("outputAChoice")
    if param is not None:
        param.setValue("A.a")
        del param

    del lastNode
    # End of node "Shuffle3"

    # Start of node "Dot17"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot17")
    lastNode.setLabel("Dot17")
    lastNode.setPosition(2120, 3432)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot17 = lastNode

    del lastNode
    # End of node "Dot17"

    # Start of node "Dot18"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot18")
    lastNode.setLabel("Dot18")
    lastNode.setPosition(2120, 2656)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot18 = lastNode

    del lastNode
    # End of node "Dot18"

    # Start of node "Switch2"
    lastNode = app.createNode("net.sf.openfx.switchPlugin", 1, group)
    lastNode.setScriptName("Switch2")
    lastNode.setLabel("Switch2")
    lastNode.setPosition(2501, 3662)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupSwitch2 = lastNode

    param = lastNode.getParam("which")
    if param is not None:
        param.setValue(0, 0)
        del param

    del lastNode
    # End of node "Switch2"

    # Start of node "Shuffle2_2"
    lastNode = app.createNode("net.sf.openfx.ShufflePlugin", 2, group)
    lastNode.setScriptName("Shuffle2_2")
    lastNode.setLabel("Shuffle2_2")
    lastNode.setPosition(3473, 3502)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.6, 0.24, 0.39)
    groupShuffle2_2 = lastNode

    param = lastNode.getParam("outputChannelsChoice")
    if param is not None:
        param.setValue("Color.RGBA")
        del param

    param = lastNode.getParam("outputR")
    if param is not None:
        param.set("A.a")
        del param

    param = lastNode.getParam("outputRChoice")
    if param is not None:
        param.setValue("A.a")
        del param

    param = lastNode.getParam("outputG")
    if param is not None:
        param.set("A.a")
        del param

    param = lastNode.getParam("outputGChoice")
    if param is not None:
        param.setValue("A.a")
        del param

    param = lastNode.getParam("outputB")
    if param is not None:
        param.set("A.a")
        del param

    param = lastNode.getParam("outputBChoice")
    if param is not None:
        param.setValue("A.a")
        del param

    param = lastNode.getParam("outputAChoice")
    if param is not None:
        param.setValue("A.a")
        del param

    del lastNode
    # End of node "Shuffle2_2"

    # Start of node "Dot19"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot19")
    lastNode.setLabel("Dot19")
    lastNode.setPosition(3518, 3676)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot19 = lastNode

    del lastNode
    # End of node "Dot19"

    # Start of node "Merge6"
    lastNode = app.createNode("net.sf.openfx.MergePlugin", 1, group)
    lastNode.setScriptName("Merge6")
    lastNode.setLabel("Merge6")
    lastNode.setPosition(2811, 2630)
    lastNode.setSize(104, 66)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupMerge6 = lastNode

    param = lastNode.getParam("NatronOfxParamStringSublabelName")
    if param is not None:
        param.setValue("mask")
        del param

    param = lastNode.getParam("operation")
    if param is not None:
        param.set("mask")
        del param

    del lastNode
    # End of node "Merge6"

    # Start of node "Shuffle4"
    lastNode = app.createNode("net.sf.openfx.ShufflePlugin", 2, group)
    lastNode.setScriptName("Shuffle4")
    lastNode.setLabel("Shuffle4")
    lastNode.setPosition(2501, 2504)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.6, 0.24, 0.39)
    groupShuffle4 = lastNode

    param = lastNode.getParam("outputChannelsChoice")
    if param is not None:
        param.setValue("Color.RGBA")
        del param

    param = lastNode.getParam("outputR")
    if param is not None:
        param.set("0")
        del param

    param = lastNode.getParam("outputRChoice")
    if param is not None:
        param.setValue("0")
        del param

    param = lastNode.getParam("outputG")
    if param is not None:
        param.set("0")
        del param

    param = lastNode.getParam("outputGChoice")
    if param is not None:
        param.setValue("0")
        del param

    param = lastNode.getParam("outputB")
    if param is not None:
        param.set("0")
        del param

    param = lastNode.getParam("outputBChoice")
    if param is not None:
        param.setValue("0")
        del param

    param = lastNode.getParam("outputAChoice")
    if param is not None:
        param.setValue("A.a")
        del param

    param = lastNode.getParam("disableNode")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "Shuffle4"

    # Start of node "Dot20"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot20")
    lastNode.setLabel("Dot20")
    lastNode.setPosition(2546, 2656)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot20 = lastNode

    del lastNode
    # End of node "Dot20"

    # Start of node "NoOp2"
    lastNode = app.createNode("net.sf.openfx.NoOpPlugin", 1, group)
    lastNode.setScriptName("NoOp2")
    lastNode.setLabel("NoOp2")
    lastNode.setPosition(3698, 1146)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupNoOp2 = lastNode


    # Create the user parameters
    lastNode.controls = lastNode.createPageParam("controls", "controls")
    param = lastNode.createDouble2DParam("glowradius", "glow radius")
    param.setMinimum(-2147483648, 0)
    param.setMaximum(2147483647, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(200, 0)
    param.setDefaultValue(100, 0)
    param.restoreDefaultValue(0)
    param.setMinimum(-2147483648, 1)
    param.setMaximum(2147483647, 1)
    param.setDisplayMinimum(0, 1)
    param.setDisplayMaximum(200, 1)
    param.setDefaultValue(100, 1)
    param.restoreDefaultValue(1)

    # Add the param to the page
    lastNode.controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    param.setEnabled(False, 0)
    param.setEnabled(False, 1)
    lastNode.glowradius = param
    del param

    param = lastNode.createChoiceParam("glowblend", "glowblend")
    entries = [ ("over", ""),
    ("screen", ""),
    ("plus", "")]
    param.setOptions(entries)
    del entries
    param.setDefaultValue("plus")
    param.restoreDefaultValue()

    # Add the param to the page
    lastNode.controls.addParam(param)

    # Set param properties
    param.setHelp("Chooses how the individual wrap-layers are blended together.")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    param.set("screen")
    param.setEnabled(False, 0)
    lastNode.glowblend = param
    del param

    # Refresh the GUI with the newly created parameters
    lastNode.setPagesOrder(['controls', 'Controls', 'Node', 'Info'])
    lastNode.refreshUserParamsGUI()
    del lastNode
    # End of node "NoOp2"

    # Start of node "glow3"
    lastNode = app.createNode("net.sf.cimg.CImgBlur", 4, group)
    lastNode.setScriptName("glow3")
    lastNode.setLabel("glow3")
    lastNode.setPosition(3015, 1506)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.8, 0.5, 0.3)
    groupglow3 = lastNode

    param = lastNode.getParam("size")
    if param is not None:
        param.setValue(25, 0)
        param.setValue(25, 1)
        del param

    param = lastNode.getParam("boundary")
    if param is not None:
        param.set("Nearest")
        del param

    del lastNode
    # End of node "glow3"

    # Start of node "Dot21"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot21")
    lastNode.setLabel("Dot21")
    lastNode.setPosition(3270, 1520)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot21 = lastNode

    del lastNode
    # End of node "Dot21"

    # Start of node "glow4"
    lastNode = app.createNode("net.sf.cimg.CImgBlur", 4, group)
    lastNode.setScriptName("glow4")
    lastNode.setLabel("glow4")
    lastNode.setPosition(3024, 1699)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.8, 0.5, 0.3)
    groupglow4 = lastNode

    param = lastNode.getParam("size")
    if param is not None:
        param.setValue(50, 0)
        param.setValue(50, 1)
        del param

    param = lastNode.getParam("boundary")
    if param is not None:
        param.set("Nearest")
        del param

    del lastNode
    # End of node "glow4"

    # Start of node "ColorCorrect1_2"
    lastNode = app.createNode("net.sf.openfx.ColorCorrectPlugin", 2, group)
    lastNode.setScriptName("ColorCorrect1_2")
    lastNode.setLabel("ColorCorrect2")
    lastNode.setPosition(3018, 1418)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.48, 0.66, 1)
    groupColorCorrect1_2 = lastNode

    param = lastNode.getParam("MasterSaturation")
    if param is not None:
        param.setValue(1, 0)
        param.setValue(1, 1)
        param.setValue(1, 2)
        param.setValue(1, 3)
        del param

    param = lastNode.getParam("MasterGamma")
    if param is not None:
        param.setValue(1, 0)
        param.setValue(1, 1)
        param.setValue(1, 2)
        param.setValue(1, 3)
        del param

    param = lastNode.getParam("toneRanges")
    if param is not None:
        param.setCurveColor(0, 0.6, 0.4, 0.6)
        param.deleteAllControlPoints(0)
        param.addControlPoint(0, 0, 1, 0, 0, NatronEngine.Natron.KeyframeTypeEnum.eKeyframeTypeHorizontal)
        param.addControlPoint(0, 0.09, 0, 0, 0, NatronEngine.Natron.KeyframeTypeEnum.eKeyframeTypeHorizontal)
        param.setCurveColor(1, 0.8, 0.7, 0.6)
        param.deleteAllControlPoints(1)
        param.addControlPoint(1, 0.5, 0, 0, 0, NatronEngine.Natron.KeyframeTypeEnum.eKeyframeTypeHorizontal)
        param.addControlPoint(1, 1, 1, 0, 0, NatronEngine.Natron.KeyframeTypeEnum.eKeyframeTypeHorizontal)
        del param

    param = lastNode.getParam("premult")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "ColorCorrect1_2"

    # Start of node "ColorCorrect1_3"
    lastNode = app.createNode("net.sf.openfx.ColorCorrectPlugin", 2, group)
    lastNode.setScriptName("ColorCorrect1_3")
    lastNode.setLabel("ColorCorrect3")
    lastNode.setPosition(3015, 1596)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.48, 0.66, 1)
    groupColorCorrect1_3 = lastNode

    param = lastNode.getParam("MasterSaturation")
    if param is not None:
        param.setValue(1, 0)
        param.setValue(1, 1)
        param.setValue(1, 2)
        param.setValue(1, 3)
        del param

    param = lastNode.getParam("MasterGamma")
    if param is not None:
        param.setValue(1, 0)
        param.setValue(1, 1)
        param.setValue(1, 2)
        param.setValue(1, 3)
        del param

    param = lastNode.getParam("toneRanges")
    if param is not None:
        param.setCurveColor(0, 0.6, 0.4, 0.6)
        param.deleteAllControlPoints(0)
        param.addControlPoint(0, 0, 1, 0, 0, NatronEngine.Natron.KeyframeTypeEnum.eKeyframeTypeHorizontal)
        param.addControlPoint(0, 0.09, 0, 0, 0, NatronEngine.Natron.KeyframeTypeEnum.eKeyframeTypeHorizontal)
        param.setCurveColor(1, 0.8, 0.7, 0.6)
        param.deleteAllControlPoints(1)
        param.addControlPoint(1, 0.5, 0, 0, 0, NatronEngine.Natron.KeyframeTypeEnum.eKeyframeTypeHorizontal)
        param.addControlPoint(1, 1, 1, 0, 0, NatronEngine.Natron.KeyframeTypeEnum.eKeyframeTypeHorizontal)
        del param

    param = lastNode.getParam("premult")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "ColorCorrect1_3"

    # Start of node "Dot22"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot22")
    lastNode.setLabel("Dot22")
    lastNode.setPosition(3270, 1713)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot22 = lastNode

    del lastNode
    # End of node "Dot22"

    # Start of node "ColorCorrect4"
    lastNode = app.createNode("net.sf.openfx.ColorCorrectPlugin", 2, group)
    lastNode.setScriptName("ColorCorrect4")
    lastNode.setLabel("ColorCorrect4")
    lastNode.setPosition(3024, 1788)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.48, 0.66, 1)
    groupColorCorrect4 = lastNode

    param = lastNode.getParam("MasterSaturation")
    if param is not None:
        param.setValue(1, 0)
        param.setValue(1, 1)
        param.setValue(1, 2)
        param.setValue(1, 3)
        del param

    param = lastNode.getParam("MasterGamma")
    if param is not None:
        param.setValue(1, 0)
        param.setValue(1, 1)
        param.setValue(1, 2)
        param.setValue(1, 3)
        del param

    param = lastNode.getParam("toneRanges")
    if param is not None:
        param.setCurveColor(0, 0.6, 0.4, 0.6)
        param.deleteAllControlPoints(0)
        param.addControlPoint(0, 0, 1, 0, 0, NatronEngine.Natron.KeyframeTypeEnum.eKeyframeTypeHorizontal)
        param.addControlPoint(0, 0.09, 0, 0, 0, NatronEngine.Natron.KeyframeTypeEnum.eKeyframeTypeHorizontal)
        param.setCurveColor(1, 0.8, 0.7, 0.6)
        param.deleteAllControlPoints(1)
        param.addControlPoint(1, 0.5, 0, 0, 0, NatronEngine.Natron.KeyframeTypeEnum.eKeyframeTypeHorizontal)
        param.addControlPoint(1, 1, 1, 0, 0, NatronEngine.Natron.KeyframeTypeEnum.eKeyframeTypeHorizontal)
        del param

    del lastNode
    # End of node "ColorCorrect4"

    # Start of node "glow5"
    lastNode = app.createNode("net.sf.cimg.CImgBlur", 4, group)
    lastNode.setScriptName("glow5")
    lastNode.setLabel("glow5")
    lastNode.setPosition(3024, 1882)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.8, 0.5, 0.3)
    groupglow5 = lastNode

    param = lastNode.getParam("size")
    if param is not None:
        param.setValue(153.8461538461538, 0)
        param.setValue(153.8461538461538, 1)
        del param

    param = lastNode.getParam("boundary")
    if param is not None:
        param.set("Nearest")
        del param

    del lastNode
    # End of node "glow5"

    # Start of node "Dot22_2"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot22_2")
    lastNode.setLabel("Dot22_2")
    lastNode.setPosition(3270, 1896)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot22_2 = lastNode

    del lastNode
    # End of node "Dot22_2"

    # Start of node "ColorCorrect5"
    lastNode = app.createNode("net.sf.openfx.ColorCorrectPlugin", 2, group)
    lastNode.setScriptName("ColorCorrect5")
    lastNode.setLabel("ColorCorrect5")
    lastNode.setPosition(3024, 1970)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.48, 0.66, 1)
    groupColorCorrect5 = lastNode

    param = lastNode.getParam("MasterSaturation")
    if param is not None:
        param.setValue(1, 0)
        param.setValue(1, 1)
        param.setValue(1, 2)
        param.setValue(1, 3)
        del param

    param = lastNode.getParam("MasterGamma")
    if param is not None:
        param.setValue(1, 0)
        param.setValue(1, 1)
        param.setValue(1, 2)
        param.setValue(1, 3)
        del param

    param = lastNode.getParam("toneRanges")
    if param is not None:
        param.setCurveColor(0, 0.6, 0.4, 0.6)
        param.deleteAllControlPoints(0)
        param.addControlPoint(0, 0, 1, 0, 0, NatronEngine.Natron.KeyframeTypeEnum.eKeyframeTypeHorizontal)
        param.addControlPoint(0, 0.09, 0, 0, 0, NatronEngine.Natron.KeyframeTypeEnum.eKeyframeTypeHorizontal)
        param.setCurveColor(1, 0.8, 0.7, 0.6)
        param.deleteAllControlPoints(1)
        param.addControlPoint(1, 0.5, 0, 0, 0, NatronEngine.Natron.KeyframeTypeEnum.eKeyframeTypeHorizontal)
        param.addControlPoint(1, 1, 1, 0, 0, NatronEngine.Natron.KeyframeTypeEnum.eKeyframeTypeHorizontal)
        del param

    param = lastNode.getParam("premult")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "ColorCorrect5"

    # Start of node "glow6"
    lastNode = app.createNode("net.sf.cimg.CImgBlur", 4, group)
    lastNode.setScriptName("glow6")
    lastNode.setLabel("glow6")
    lastNode.setPosition(3025, 2065)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.8, 0.5, 0.3)
    groupglow6 = lastNode

    param = lastNode.getParam("size")
    if param is not None:
        param.setValue(333.3333333333334, 0)
        param.setValue(333.3333333333334, 1)
        del param

    param = lastNode.getParam("boundary")
    if param is not None:
        param.set("Nearest")
        del param

    del lastNode
    # End of node "glow6"

    # Start of node "Dot22_2_2"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot22_2_2")
    lastNode.setLabel("Dot22_2_2")
    lastNode.setPosition(3270, 2079)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot22_2_2 = lastNode

    del lastNode
    # End of node "Dot22_2_2"

    # Start of node "ColorCorrect6"
    lastNode = app.createNode("net.sf.openfx.ColorCorrectPlugin", 2, group)
    lastNode.setScriptName("ColorCorrect6")
    lastNode.setLabel("ColorCorrect6")
    lastNode.setPosition(3025, 2154)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.48, 0.66, 1)
    groupColorCorrect6 = lastNode

    param = lastNode.getParam("MasterSaturation")
    if param is not None:
        param.setValue(1, 0)
        param.setValue(1, 1)
        param.setValue(1, 2)
        param.setValue(1, 3)
        del param

    param = lastNode.getParam("MasterGamma")
    if param is not None:
        param.setValue(1, 0)
        param.setValue(1, 1)
        param.setValue(1, 2)
        param.setValue(1, 3)
        del param

    param = lastNode.getParam("toneRanges")
    if param is not None:
        param.setCurveColor(0, 0.6, 0.4, 0.6)
        param.deleteAllControlPoints(0)
        param.addControlPoint(0, 0, 1, 0, 0, NatronEngine.Natron.KeyframeTypeEnum.eKeyframeTypeHorizontal)
        param.addControlPoint(0, 0.09, 0, 0, 0, NatronEngine.Natron.KeyframeTypeEnum.eKeyframeTypeHorizontal)
        param.setCurveColor(1, 0.8, 0.7, 0.6)
        param.deleteAllControlPoints(1)
        param.addControlPoint(1, 0.5, 0, 0, 0, NatronEngine.Natron.KeyframeTypeEnum.eKeyframeTypeHorizontal)
        param.addControlPoint(1, 1, 1, 0, 0, NatronEngine.Natron.KeyframeTypeEnum.eKeyframeTypeHorizontal)
        del param

    param = lastNode.getParam("premult")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "ColorCorrect6"

    # Start of node "glow6_2"
    lastNode = app.createNode("net.sf.cimg.CImgBlur", 4, group)
    lastNode.setScriptName("glow6_2")
    lastNode.setLabel("glow6_2")
    lastNode.setPosition(3022, 2262)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.8, 0.5, 0.3)
    groupglow6_2 = lastNode

    param = lastNode.getParam("size")
    if param is not None:
        param.setValue(333.3333333333334, 0)
        param.setValue(333.3333333333334, 1)
        del param

    param = lastNode.getParam("boundary")
    if param is not None:
        param.set("Nearest")
        del param

    del lastNode
    # End of node "glow6_2"

    # Start of node "Dot22_2_2_2"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot22_2_2_2")
    lastNode.setLabel("Dot22_2_2_2")
    lastNode.setPosition(3270, 2276)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot22_2_2_2 = lastNode

    del lastNode
    # End of node "Dot22_2_2_2"

    # Start of node "ColorCorrect6_2"
    lastNode = app.createNode("net.sf.openfx.ColorCorrectPlugin", 2, group)
    lastNode.setScriptName("ColorCorrect6_2")
    lastNode.setLabel("ColorCorrect6_2")
    lastNode.setPosition(3022, 2351)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.48, 0.66, 1)
    groupColorCorrect6_2 = lastNode

    param = lastNode.getParam("MasterSaturation")
    if param is not None:
        param.setValue(1, 0)
        param.setValue(1, 1)
        param.setValue(1, 2)
        param.setValue(1, 3)
        del param

    param = lastNode.getParam("MasterGamma")
    if param is not None:
        param.setValue(1, 0)
        param.setValue(1, 1)
        param.setValue(1, 2)
        param.setValue(1, 3)
        del param

    param = lastNode.getParam("toneRanges")
    if param is not None:
        param.setCurveColor(0, 0.6, 0.4, 0.6)
        param.deleteAllControlPoints(0)
        param.addControlPoint(0, 0, 1, 0, 0, NatronEngine.Natron.KeyframeTypeEnum.eKeyframeTypeHorizontal)
        param.addControlPoint(0, 0.09, 0, 0, 0, NatronEngine.Natron.KeyframeTypeEnum.eKeyframeTypeHorizontal)
        param.setCurveColor(1, 0.8, 0.7, 0.6)
        param.deleteAllControlPoints(1)
        param.addControlPoint(1, 0.5, 0, 0, 0, NatronEngine.Natron.KeyframeTypeEnum.eKeyframeTypeHorizontal)
        param.addControlPoint(1, 1, 1, 0, 0, NatronEngine.Natron.KeyframeTypeEnum.eKeyframeTypeHorizontal)
        del param

    param = lastNode.getParam("premult")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "ColorCorrect6_2"

    # Start of node "Merge7"
    lastNode = app.createNode("net.sf.openfx.MergePlugin", 1, group)
    lastNode.setScriptName("Merge7")
    lastNode.setLabel("Merge7")
    lastNode.setPosition(2811, 1584)
    lastNode.setSize(104, 66)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupMerge7 = lastNode

    param = lastNode.getParam("NatronOfxParamStringSublabelName")
    if param is not None:
        param.setValue("screen")
        del param

    param = lastNode.getParam("operation")
    if param is not None:
        param.set("screen")
        del param

    param = lastNode.getParam("mix")
    if param is not None:
        param.setValue(1, 0)
        del param

    del lastNode
    # End of node "Merge7"

    # Start of node "Merge7_2"
    lastNode = app.createNode("net.sf.openfx.MergePlugin", 1, group)
    lastNode.setScriptName("Merge7_2")
    lastNode.setLabel("Merge7_2")
    lastNode.setPosition(2811, 1776)
    lastNode.setSize(104, 66)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupMerge7_2 = lastNode

    param = lastNode.getParam("NatronOfxParamStringSublabelName")
    if param is not None:
        param.setValue("screen")
        del param

    param = lastNode.getParam("operation")
    if param is not None:
        param.set("screen")
        del param

    param = lastNode.getParam("mix")
    if param is not None:
        param.setValue(0.8, 0)
        del param

    del lastNode
    # End of node "Merge7_2"

    # Start of node "Merge7_2_2"
    lastNode = app.createNode("net.sf.openfx.MergePlugin", 1, group)
    lastNode.setScriptName("Merge7_2_2")
    lastNode.setLabel("Merge7_2_2")
    lastNode.setPosition(2811, 1958)
    lastNode.setSize(104, 66)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupMerge7_2_2 = lastNode

    param = lastNode.getParam("NatronOfxParamStringSublabelName")
    if param is not None:
        param.setValue("screen")
        del param

    param = lastNode.getParam("operation")
    if param is not None:
        param.set("screen")
        del param

    param = lastNode.getParam("mix")
    if param is not None:
        param.setValue(0.6, 0)
        del param

    del lastNode
    # End of node "Merge7_2_2"

    # Start of node "Merge7_2_2_2"
    lastNode = app.createNode("net.sf.openfx.MergePlugin", 1, group)
    lastNode.setScriptName("Merge7_2_2_2")
    lastNode.setLabel("Merge7_2_2_2")
    lastNode.setPosition(2811, 2142)
    lastNode.setSize(104, 66)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupMerge7_2_2_2 = lastNode

    param = lastNode.getParam("NatronOfxParamStringSublabelName")
    if param is not None:
        param.setValue("screen")
        del param

    param = lastNode.getParam("operation")
    if param is not None:
        param.set("screen")
        del param

    param = lastNode.getParam("mix")
    if param is not None:
        param.setValue(0.2, 0)
        del param

    del lastNode
    # End of node "Merge7_2_2_2"

    # Start of node "Merge7_2_2_2_2"
    lastNode = app.createNode("net.sf.openfx.MergePlugin", 1, group)
    lastNode.setScriptName("Merge7_2_2_2_2")
    lastNode.setLabel("Merge7_2_2_2_2")
    lastNode.setPosition(2811, 2339)
    lastNode.setSize(104, 66)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupMerge7_2_2_2_2 = lastNode

    param = lastNode.getParam("NatronOfxParamStringSublabelName")
    if param is not None:
        param.setValue("screen")
        del param

    param = lastNode.getParam("operation")
    if param is not None:
        param.set("screen")
        del param

    param = lastNode.getParam("mix")
    if param is not None:
        param.setValue(0.1, 0)
        del param

    del lastNode
    # End of node "Merge7_2_2_2_2"

    # Start of node "Shuffle5"
    lastNode = app.createNode("net.sf.openfx.ShufflePlugin", 2, group)
    lastNode.setScriptName("Shuffle5")
    lastNode.setLabel("Shuffle5")
    lastNode.setPosition(3225, 1106)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.6, 0.24, 0.39)
    groupShuffle5 = lastNode

    param = lastNode.getParam("outputChannelsChoice")
    if param is not None:
        param.setValue("Color.RGBA")
        del param

    param = lastNode.getParam("outputRChoice")
    if param is not None:
        param.setValue("A.r")
        del param

    param = lastNode.getParam("outputGChoice")
    if param is not None:
        param.setValue("A.g")
        del param

    param = lastNode.getParam("outputBChoice")
    if param is not None:
        param.setValue("A.b")
        del param

    param = lastNode.getParam("outputA")
    if param is not None:
        param.set("1")
        del param

    param = lastNode.getParam("outputAChoice")
    if param is not None:
        param.setValue("1")
        del param

    param = lastNode.getParam("disableNode")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "Shuffle5"

    # Start of node "Shuffle6"
    lastNode = app.createNode("net.sf.openfx.ShufflePlugin", 2, group)
    lastNode.setScriptName("Shuffle6")
    lastNode.setLabel("Shuffle6")
    lastNode.setPosition(2811, 2510)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.6, 0.24, 0.39)
    groupShuffle6 = lastNode

    param = lastNode.getParam("outputChannelsChoice")
    if param is not None:
        param.setValue("Color.RGBA")
        del param

    param = lastNode.getParam("outputRChoice")
    if param is not None:
        param.setValue("A.r")
        del param

    param = lastNode.getParam("outputGChoice")
    if param is not None:
        param.setValue("A.g")
        del param

    param = lastNode.getParam("outputBChoice")
    if param is not None:
        param.setValue("A.b")
        del param

    param = lastNode.getParam("outputA")
    if param is not None:
        param.set("B.a")
        del param

    param = lastNode.getParam("outputAChoice")
    if param is not None:
        param.setValue("B.a")
        del param

    param = lastNode.getParam("disableNode")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "Shuffle6"

    # Start of node "Dot24"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot24")
    lastNode.setLabel("Dot24")
    lastNode.setPosition(3403, 2524)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot24 = lastNode

    del lastNode
    # End of node "Dot24"

    # Start of node "Dot25"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot25")
    lastNode.setLabel("Dot25")
    lastNode.setPosition(3403, 1052)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot25 = lastNode

    del lastNode
    # End of node "Dot25"

    # Start of node "Dot26"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot26")
    lastNode.setLabel("Dot26")
    lastNode.setPosition(3270, 1052)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot26 = lastNode

    del lastNode
    # End of node "Dot26"

    # Now that all nodes are created we can connect them together, restore expressions
    grouppreblur.connectInput(0, groupDot6)
    groupOutput1.connectInput(0, groupSwitch2)
    groupShuffle1.connectInput(0, groupDot3)
    groupShuffle1.connectInput(1, groupDot1)
    groupDot1.connectInput(0, groupimg)
    groupInvert1.connectInput(0, groupShuffle1)
    groupMerge1.connectInput(0, groupInvert1)
    groupMerge1.connectInput(1, groupDot2)
    groupDot2.connectInput(0, groupInvert2)
    groupInvert2.connectInput(0, groupmask)
    groupDot3.connectInput(0, grouppreblur)
    groupSaturation1.connectInput(0, groupDot4)
    groupDot4.connectInput(0, groupDot3)
    groupShuffle2.connectInput(1, groupSaturation1)
    groupGrade1.connectInput(0, groupShuffle2)
    groupMerge1_2.connectInput(0, groupMerge1)
    groupMerge1_2.connectInput(1, groupDot5)
    groupDot5.connectInput(0, groupGrade1)
    groupPremult1.connectInput(0, groupMerge1_2)
    groupDot6.connectInput(0, groupbg)
    groupglow1.connectInput(0, groupDot7)
    groupDot7.connectInput(0, groupShuffle5)
    groupColorCorrect1.connectInput(0, groupglow1)
    groupMerge2.connectInput(0, groupDot8)
    groupMerge2.connectInput(1, groupColorCorrect1_2)
    groupDot8.connectInput(0, groupColorCorrect1)
    groupglow2.connectInput(0, groupDot9)
    groupDot9.connectInput(0, groupDot7)
    groupDot10.connectInput(0, groupMerge6)
    groupMerge3.connectInput(0, groupDot20)
    groupMerge3.connectInput(1, groupDot10)
    groupDot11.connectInput(0, groupDot1)
    groupMerge4.connectInput(0, groupDot12)
    groupMerge4.connectInput(1, groupDot13)
    groupDot12.connectInput(0, groupDot20)
    groupDot13.connectInput(0, groupDot10)
    groupMerge5.connectInput(0, groupDot15)
    groupMerge5.connectInput(1, groupDot14)
    groupDot14.connectInput(0, groupDot13)
    groupDot15.connectInput(0, groupDot12)
    groupSwitch1.connectInput(0, groupMerge3)
    groupSwitch1.connectInput(1, groupMerge4)
    groupSwitch1.connectInput(2, groupDot16)
    groupDot16.connectInput(0, groupMerge5)
    groupShuffle3.connectInput(0, groupSwitch1)
    groupShuffle3.connectInput(1, groupDot17)
    groupDot17.connectInput(0, groupDot18)
    groupDot18.connectInput(0, groupDot15)
    groupSwitch2.connectInput(0, groupShuffle3)
    groupSwitch2.connectInput(1, groupDot19)
    groupShuffle2_2.connectInput(1, groupDot5)
    groupDot19.connectInput(0, groupShuffle2_2)
    groupMerge6.connectInput(0, groupShuffle6)
    groupMerge6.connectInput(1, groupDot20)
    groupShuffle4.connectInput(1, groupDot11)
    groupDot20.connectInput(0, groupShuffle4)
    groupglow3.connectInput(0, groupDot21)
    groupDot21.connectInput(0, groupDot9)
    groupglow4.connectInput(0, groupDot22)
    groupColorCorrect1_2.connectInput(0, groupglow2)
    groupColorCorrect1_3.connectInput(0, groupglow3)
    groupDot22.connectInput(0, groupDot21)
    groupColorCorrect4.connectInput(0, groupglow4)
    groupglow5.connectInput(0, groupDot22_2)
    groupDot22_2.connectInput(0, groupDot22)
    groupColorCorrect5.connectInput(0, groupglow5)
    groupglow6.connectInput(0, groupDot22_2_2)
    groupDot22_2_2.connectInput(0, groupDot22_2)
    groupColorCorrect6.connectInput(0, groupglow6)
    groupglow6_2.connectInput(0, groupDot22_2_2_2)
    groupDot22_2_2_2.connectInput(0, groupDot22_2_2)
    groupColorCorrect6_2.connectInput(0, groupglow6_2)
    groupMerge7.connectInput(0, groupMerge2)
    groupMerge7.connectInput(1, groupColorCorrect1_3)
    groupMerge7_2.connectInput(0, groupMerge7)
    groupMerge7_2.connectInput(1, groupColorCorrect4)
    groupMerge7_2_2.connectInput(0, groupMerge7_2)
    groupMerge7_2_2.connectInput(1, groupColorCorrect5)
    groupMerge7_2_2_2.connectInput(0, groupMerge7_2_2)
    groupMerge7_2_2_2.connectInput(1, groupColorCorrect6)
    groupMerge7_2_2_2_2.connectInput(0, groupMerge7_2_2_2)
    groupMerge7_2_2_2_2.connectInput(1, groupColorCorrect6_2)
    groupShuffle5.connectInput(1, groupDot26)
    groupShuffle6.connectInput(0, groupDot24)
    groupShuffle6.connectInput(1, groupMerge7_2_2_2_2)
    groupDot24.connectInput(0, groupDot25)
    groupDot25.connectInput(0, groupDot26)
    groupDot26.connectInput(0, groupPremult1)

    param = grouppreblur.getParam("size")
    group.getParam("preblursize").setAsAlias(param)
    del param
    param = groupInvert2.getParam("disableNode")
    param.setExpression("1-thisGroup.invmask.get()", False, 0)
    del param
    param = groupGrade1.getParam("blackPoint")
    param.setExpression("thisGroup.lumalow.get()", False, 0)
    param.setExpression("thisGroup.lumalow.get()", False, 1)
    param.setExpression("thisGroup.lumalow.get()", False, 2)
    param.setExpression("thisGroup.lumalow.get()", False, 3)
    del param
    param = groupGrade1.getParam("whitePoint")
    param.setExpression("thisGroup.lumahigh.get()", False, 0)
    param.setExpression("thisGroup.lumahigh.get()", False, 1)
    param.setExpression("thisGroup.lumahigh.get()", False, 2)
    param.setExpression("thisGroup.lumahigh.get()", False, 3)
    del param
    param = groupMerge1_2.getParam("disableNode")
    param.setExpression("thisGroup.disableluma.get()", False, 0)
    del param
    param = groupglow1.getParam("size")
    param.setExpression("thisGroup.NoOp2.glowradius.get()[dimension]/100", False, 0)
    param.setExpression("thisGroup.NoOp2.glowradius.get()[dimension]/100", False, 1)
    del param
    param = groupglow1.getParam("filter")
    group.getParam("glow1filter").setAsAlias(param)
    del param
    param = groupColorCorrect1.getParam("MasterSaturation")
    param.setExpression("thisGroup.wrapsaturation.get()", False, 0)
    param.setExpression("thisGroup.wrapsaturation.get()", False, 1)
    param.setExpression("thisGroup.wrapsaturation.get()", False, 2)
    param.setExpression("thisGroup.wrapsaturation.get()", False, 3)
    del param
    param = groupColorCorrect1.getParam("MasterGamma")
    param.setExpression("thisGroup.wrapgamma.get()", False, 0)
    param.setExpression("thisGroup.wrapgamma.get()", False, 1)
    param.setExpression("thisGroup.wrapgamma.get()", False, 2)
    param.setExpression("thisGroup.wrapgamma.get()", False, 3)
    del param
    param = groupMerge2.getParam("operation")
    param.setExpression("if thisGroup.NoOp2.glowblend.get() == 0:\n\tret = 28\nelif thisGroup.NoOp2.glowblend.get() == 1:\n\tret = 34\nelif thisGroup.NoOp2.glowblend.get() == 2:\n\tret = 31\nelse:\n\tret = 0", True, 0)
    del param
    param = groupMerge2.getParam("mix")
    group.getParam("Merge2mix").setAsAlias(param)
    del param
    param = groupglow2.getParam("size")
    param.setExpression("thisGroup.NoOp2.glowradius.get()[dimension]/14", False, 0)
    param.setExpression("thisGroup.NoOp2.glowradius.get()[dimension]/14", False, 1)
    del param
    param = groupglow2.getParam("filter")
    param.slaveTo(groupglow1.getParam("filter"), 0, 0)
    del param
    param = groupSwitch1.getParam("which")
    param.setExpression("thisGroup.blending.get()", False, 0)
    del param
    param = groupSwitch2.getParam("which")
    param.setExpression("thisGroup.previewluma.get()", False, 0)
    del param
    param = groupShuffle4.getParam("disableNode")
    param.setExpression("1-thisGroup.effectonly.get()", False, 0)
    del param
    param = groupNoOp2.getParam("glowradius")
    group.getParam("NoOp2glowradius").setAsAlias(param)
    del param
    param = groupNoOp2.getParam("glowblend")
    group.getParam("NoOp2glowblend").setAsAlias(param)
    del param
    param = groupglow3.getParam("size")
    param.setExpression("thisGroup.NoOp2.glowradius.get()[dimension]/4", False, 0)
    param.setExpression("thisGroup.NoOp2.glowradius.get()[dimension]/4", False, 1)
    del param
    param = groupglow3.getParam("filter")
    param.slaveTo(groupglow1.getParam("filter"), 0, 0)
    del param
    param = groupglow4.getParam("size")
    param.setExpression("thisGroup.NoOp2.glowradius.get()[dimension]/2", False, 0)
    param.setExpression("thisGroup.NoOp2.glowradius.get()[dimension]/2", False, 1)
    del param
    param = groupglow4.getParam("filter")
    param.slaveTo(groupglow1.getParam("filter"), 0, 0)
    del param
    param = groupColorCorrect1_2.getParam("MasterSaturation")
    param.setExpression("thisGroup.wrapsaturation.get()", False, 0)
    param.setExpression("thisGroup.wrapsaturation.get()", False, 1)
    param.setExpression("thisGroup.wrapsaturation.get()", False, 2)
    param.setExpression("thisGroup.wrapsaturation.get()", False, 3)
    del param
    param = groupColorCorrect1_2.getParam("MasterGamma")
    param.setExpression("thisGroup.wrapgamma.get()", False, 0)
    param.setExpression("thisGroup.wrapgamma.get()", False, 1)
    param.setExpression("thisGroup.wrapgamma.get()", False, 2)
    param.setExpression("thisGroup.wrapgamma.get()", False, 3)
    del param
    param = groupColorCorrect1_3.getParam("MasterSaturation")
    param.setExpression("thisGroup.wrapsaturation.get()", False, 0)
    param.setExpression("thisGroup.wrapsaturation.get()", False, 1)
    param.setExpression("thisGroup.wrapsaturation.get()", False, 2)
    param.setExpression("thisGroup.wrapsaturation.get()", False, 3)
    del param
    param = groupColorCorrect1_3.getParam("MasterGamma")
    param.setExpression("thisGroup.wrapgamma.get()", False, 0)
    param.setExpression("thisGroup.wrapgamma.get()", False, 1)
    param.setExpression("thisGroup.wrapgamma.get()", False, 2)
    param.setExpression("thisGroup.wrapgamma.get()", False, 3)
    del param
    param = groupColorCorrect4.getParam("MasterSaturation")
    param.setExpression("thisGroup.wrapsaturation.get()", False, 0)
    param.setExpression("thisGroup.wrapsaturation.get()", False, 1)
    param.setExpression("thisGroup.wrapsaturation.get()", False, 2)
    param.setExpression("thisGroup.wrapsaturation.get()", False, 3)
    del param
    param = groupColorCorrect4.getParam("MasterGamma")
    param.setExpression("thisGroup.wrapgamma.get()", False, 0)
    param.setExpression("thisGroup.wrapgamma.get()", False, 1)
    param.setExpression("thisGroup.wrapgamma.get()", False, 2)
    param.setExpression("thisGroup.wrapgamma.get()", False, 3)
    del param
    param = groupglow5.getParam("size")
    param.setExpression("thisGroup.NoOp2.glowradius.get()[dimension]/.65", False, 0)
    param.setExpression("thisGroup.NoOp2.glowradius.get()[dimension]/.65", False, 1)
    del param
    param = groupglow5.getParam("filter")
    param.slaveTo(groupglow1.getParam("filter"), 0, 0)
    del param
    param = groupColorCorrect5.getParam("MasterSaturation")
    param.setExpression("thisGroup.wrapsaturation.get()", False, 0)
    param.setExpression("thisGroup.wrapsaturation.get()", False, 1)
    param.setExpression("thisGroup.wrapsaturation.get()", False, 2)
    param.setExpression("thisGroup.wrapsaturation.get()", False, 3)
    del param
    param = groupColorCorrect5.getParam("MasterGamma")
    param.setExpression("thisGroup.wrapgamma.get()", False, 0)
    param.setExpression("thisGroup.wrapgamma.get()", False, 1)
    param.setExpression("thisGroup.wrapgamma.get()", False, 2)
    param.setExpression("thisGroup.wrapgamma.get()", False, 3)
    del param
    param = groupglow6.getParam("size")
    param.setExpression("thisGroup.NoOp2.glowradius.get()[dimension]/.3", False, 0)
    param.setExpression("thisGroup.NoOp2.glowradius.get()[dimension]/.3", False, 1)
    del param
    param = groupglow6.getParam("filter")
    param.slaveTo(groupglow1.getParam("filter"), 0, 0)
    del param
    param = groupColorCorrect6.getParam("MasterSaturation")
    param.setExpression("thisGroup.wrapsaturation.get()", False, 0)
    param.setExpression("thisGroup.wrapsaturation.get()", False, 1)
    param.setExpression("thisGroup.wrapsaturation.get()", False, 2)
    param.setExpression("thisGroup.wrapsaturation.get()", False, 3)
    del param
    param = groupColorCorrect6.getParam("MasterGamma")
    param.setExpression("thisGroup.wrapgamma.get()", False, 0)
    param.setExpression("thisGroup.wrapgamma.get()", False, 1)
    param.setExpression("thisGroup.wrapgamma.get()", False, 2)
    param.setExpression("thisGroup.wrapgamma.get()", False, 3)
    del param
    param = groupglow6_2.getParam("size")
    param.setExpression("thisGroup.NoOp2.glowradius.get()[dimension]/.3", False, 0)
    param.setExpression("thisGroup.NoOp2.glowradius.get()[dimension]/.3", False, 1)
    del param
    param = groupglow6_2.getParam("filter")
    param.slaveTo(groupglow1.getParam("filter"), 0, 0)
    del param
    param = groupColorCorrect6_2.getParam("MasterSaturation")
    param.setExpression("thisGroup.wrapsaturation.get()", False, 0)
    param.setExpression("thisGroup.wrapsaturation.get()", False, 1)
    param.setExpression("thisGroup.wrapsaturation.get()", False, 2)
    param.setExpression("thisGroup.wrapsaturation.get()", False, 3)
    del param
    param = groupColorCorrect6_2.getParam("MasterGamma")
    param.setExpression("thisGroup.wrapgamma.get()", False, 0)
    param.setExpression("thisGroup.wrapgamma.get()", False, 1)
    param.setExpression("thisGroup.wrapgamma.get()", False, 2)
    param.setExpression("thisGroup.wrapgamma.get()", False, 3)
    del param
    param = groupMerge7.getParam("operation")
    param.setExpression("thisGroup.Merge2.operation.get()", False, 0)
    del param
    param = groupMerge7.getParam("mix")
    param.setExpression("thisGroup.Merge2.mix.get()", False, 0)
    del param
    param = groupMerge7_2.getParam("operation")
    param.setExpression("thisGroup.Merge2.operation.get()", False, 0)
    del param
    param = groupMerge7_2.getParam("mix")
    param.setExpression("thisGroup.Merge2.mix.get()*.8", False, 0)
    del param
    param = groupMerge7_2_2.getParam("operation")
    param.setExpression("thisGroup.Merge2.operation.get()", False, 0)
    del param
    param = groupMerge7_2_2.getParam("mix")
    param.setExpression("thisGroup.Merge2.mix.get()*.6", False, 0)
    del param
    param = groupMerge7_2_2_2.getParam("operation")
    param.setExpression("thisGroup.Merge2.operation.get()", False, 0)
    del param
    param = groupMerge7_2_2_2.getParam("mix")
    param.setExpression("thisGroup.Merge2.mix.get()*.2", False, 0)
    del param
    param = groupMerge7_2_2_2_2.getParam("operation")
    param.setExpression("thisGroup.Merge2.operation.get()", False, 0)
    del param
    param = groupMerge7_2_2_2_2.getParam("mix")
    param.setExpression("thisGroup.Merge2.mix.get()*.1", False, 0)
    del param
    param = groupShuffle5.getParam("disableNode")
    param.setExpression("if thisGroup.NoOp2.glowblend.get() == 0:\n\tret = 0\nelse:\n\tret = 1", True, 0)
    del param
    param = groupShuffle6.getParam("disableNode")
    param.setExpression("if thisGroup.NoOp2.glowblend.get() == 0:\n\tret = 0\nelse:\n\tret = 1", True, 0)
    del param

    try:
        extModule = sys.modules["lp_LightwrapExt"]
    except KeyError:
        extModule = None
    if extModule is not None and hasattr(extModule ,"createInstanceExt") and hasattr(extModule.createInstanceExt,"__call__"):
        extModule.createInstanceExt(app,group)
