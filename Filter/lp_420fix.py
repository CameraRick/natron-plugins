# -*- coding: utf-8 -*-
# DO NOT EDIT THIS FILE
# This file was automatically generated by Natron PyPlug exporter version 10.

# Hand-written code should be added in a separate file named lp_420fixExt.py
# See http://natron.readthedocs.org/en/master/groups.html#adding-hand-written-code-callbacks-etc
# Note that Viewers are never exported

import NatronEngine
import sys

# Try to import the extensions file where callbacks and hand-written code should be located.
try:
    from lp_420fixExt import *
except ImportError:
    pass

def getPluginID():
    return "lp_420fix"

def getLabel():
    return "lp_420fix"

def getVersion():
    return 1

def getGrouping():
    return "Filter"

def getPluginDescription():
    return "Filters colourchannels to help smoothing out low 420 colour-subsampling.\n\nINPUTS\nimg = connect the main plate you want to clean\n\nHOW TO USE IT\nJust pop it behind your source, there\'s nothing else to do. Works better on some shots than others; but it\'s also worth a try.\n\nHOW DOES IT WORK\nBasically, this tool just uses a notch filter only on the colour channels. Easy :)"

def createInstance(app,group):
    # Create all nodes in the group

    # Create the parameters of the group node the same way we did for all internal nodes
    lastNode = group

    # Create the user parameters
    lastNode.userNatron = lastNode.createPageParam("userNatron", "Controls")
    param = lastNode.createStringParam("label", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)
    param.setDefaultValue("nothing to setup :)")
    param.restoreDefaultValue()

    # Add the param to the page
    lastNode.userNatron.addParam(param)

    # Set param properties
    param.setHelp("For real! Just use it :)")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.label = param
    del param

    param = lastNode.createStringParam("credit", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.userNatron.addParam(param)

    # Set param properties
    param.setHelp("lp_420fix\n(c) 2016 by lucas pfaff")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    param.setVisibleByDefault(False)
    lastNode.credit = param
    del param

    # Refresh the GUI with the newly created parameters
    lastNode.setPagesOrder(['userNatron', 'Node', 'Info'])
    lastNode.refreshUserParamsGUI()
    del lastNode

    # Start of node "Transform1"
    lastNode = app.createNode("net.sf.openfx.TransformPlugin", 1, group)
    lastNode.setScriptName("Transform1")
    lastNode.setLabel("Transform1")
    lastNode.setPosition(3600, 96)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.7, 0.3, 0.1)
    groupTransform1 = lastNode

    param = lastNode.getParam("translate")
    if param is not None:
        param.setValue(0, 0)
        param.setValue(0, 1)
        del param

    param = lastNode.getParam("scale")
    if param is not None:
        param.setValue(2, 0)
        del param

    param = lastNode.getParam("center")
    if param is not None:
        param.setValue(0, 0)
        param.setValue(0, 1)
        del param

    del lastNode
    # End of node "Transform1"

    # Start of node "Transform2"
    lastNode = app.createNode("net.sf.openfx.TransformPlugin", 1, group)
    lastNode.setScriptName("Transform2")
    lastNode.setLabel("Transform2")
    lastNode.setPosition(3600, 222)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.7, 0.3, 0.1)
    groupTransform2 = lastNode

    param = lastNode.getParam("translate")
    if param is not None:
        param.setValue(0, 0)
        param.setValue(0, 1)
        del param

    param = lastNode.getParam("scale")
    if param is not None:
        param.setValue(0.5, 0)
        del param

    param = lastNode.getParam("center")
    if param is not None:
        param.setValue(0, 0)
        param.setValue(0, 1)
        del param

    param = lastNode.getParam("filter")
    if param is not None:
        param.set("Notch")
        del param

    del lastNode
    # End of node "Transform2"

    # Start of node "Output1"
    lastNode = app.createNode("fr.inria.built-in.Output", 1, group)
    lastNode.setScriptName("Output1")
    lastNode.setLabel("Output1")
    lastNode.setPosition(3600, 807)
    lastNode.setSize(104, 31)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupOutput1 = lastNode

    del lastNode
    # End of node "Output1"

    # Start of node "img"
    lastNode = app.createNode("fr.inria.built-in.Input", 1, group)
    lastNode.setScriptName("img")
    lastNode.setLabel("img")
    lastNode.setPosition(3600, -326)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.3, 0.5, 0.2)
    groupimg = lastNode

    del lastNode
    # End of node "img"

    # Start of node "RGBToYPbPr7091"
    lastNode = app.createNode("net.sf.openfx.RGBToYPbPr709", 1, group)
    lastNode.setScriptName("RGBToYPbPr7091")
    lastNode.setLabel("RGBToYPbPr7091")
    lastNode.setPosition(3612, -127)
    lastNode.setSize(80, 43)
    lastNode.setColor(0.48, 0.66, 1)
    groupRGBToYPbPr7091 = lastNode

    del lastNode
    # End of node "RGBToYPbPr7091"

    # Start of node "Shuffle1"
    lastNode = app.createNode("net.sf.openfx.ShufflePlugin", 2, group)
    lastNode.setScriptName("Shuffle1")
    lastNode.setLabel("Shuffle1")
    lastNode.setPosition(3600, 371)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.6, 0.24, 0.39)
    groupShuffle1 = lastNode

    param = lastNode.getParam("outputChannelsChoice")
    if param is not None:
        param.setValue("Color.RGBA")
        del param

    param = lastNode.getParam("outputR")
    if param is not None:
        param.set("B.r")
        del param

    param = lastNode.getParam("outputRChoice")
    if param is not None:
        param.setValue("B.r")
        del param

    param = lastNode.getParam("outputGChoice")
    if param is not None:
        param.setValue("A.g")
        del param

    param = lastNode.getParam("outputBChoice")
    if param is not None:
        param.setValue("A.b")
        del param

    param = lastNode.getParam("outputA")
    if param is not None:
        param.set("B.a")
        del param

    param = lastNode.getParam("outputAChoice")
    if param is not None:
        param.setValue("B.a")
        del param

    del lastNode
    # End of node "Shuffle1"

    # Start of node "Dot1"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot1")
    lastNode.setLabel("Dot1")
    lastNode.setPosition(3473, 385)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot1 = lastNode

    del lastNode
    # End of node "Dot1"

    # Start of node "Dot2"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot2")
    lastNode.setLabel("Dot2")
    lastNode.setPosition(3473, -17)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot2 = lastNode

    del lastNode
    # End of node "Dot2"

    # Start of node "YPbPrToRGB7091"
    lastNode = app.createNode("net.sf.openfx.YPbPrToRGB709", 1, group)
    lastNode.setScriptName("YPbPrToRGB7091")
    lastNode.setLabel("YPbPrToRGB7091")
    lastNode.setPosition(3612, 563)
    lastNode.setSize(80, 43)
    lastNode.setColor(0.48, 0.66, 1)
    groupYPbPrToRGB7091 = lastNode

    del lastNode
    # End of node "YPbPrToRGB7091"

    # Start of node "Dot4"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot4")
    lastNode.setLabel("Dot4")
    lastNode.setPosition(3645, -17)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot4 = lastNode

    del lastNode
    # End of node "Dot4"

    # Now that all nodes are created we can connect them together, restore expressions
    groupTransform1.connectInput(0, groupDot4)
    groupTransform2.connectInput(0, groupTransform1)
    groupOutput1.connectInput(0, groupYPbPrToRGB7091)
    groupRGBToYPbPr7091.connectInput(0, groupimg)
    groupShuffle1.connectInput(0, groupDot1)
    groupShuffle1.connectInput(1, groupTransform2)
    groupDot1.connectInput(0, groupDot2)
    groupDot2.connectInput(0, groupDot4)
    groupYPbPrToRGB7091.connectInput(0, groupShuffle1)
    groupDot4.connectInput(0, groupRGBToYPbPr7091)

    param = groupTransform1.getParam("translate")
    param.setExpression("0", False, 0)
    param.setExpression("0", False, 1)
    del param
    param = groupTransform1.getParam("center")
    param.setExpression("0", False, 0)
    param.setExpression("0", False, 1)
    del param
    param = groupTransform2.getParam("translate")
    param.setExpression("0", False, 0)
    param.setExpression("0", False, 1)
    del param
    param = groupTransform2.getParam("scale")
    param.setExpression("1/Transform1.scale.get()[0]", False, 0)
    del param
    param = groupTransform2.getParam("center")
    param.setExpression("0", False, 0)
    param.setExpression("0", False, 1)
    del param

    try:
        extModule = sys.modules["lp_420fixExt"]
    except KeyError:
        extModule = None
    if extModule is not None and hasattr(extModule ,"createInstanceExt") and hasattr(extModule.createInstanceExt,"__call__"):
        extModule.createInstanceExt(app,group)
