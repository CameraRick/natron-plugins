# -*- coding: utf-8 -*-
# DO NOT EDIT THIS FILE
# This file was automatically generated by Natron PyPlug exporter version 10.

# Hand-written code should be added in a separate file named lp_Feather_advExt.py
# See http://natron.readthedocs.org/en/master/groups.html#adding-hand-written-code-callbacks-etc
# Note that Viewers are never exported

import NatronEngine
import sys

# Try to import the extensions file where callbacks and hand-written code should be located.
try:
    from lp_Feather_advExt import *
except ImportError:
    pass

def getPluginID():
    return "lp_Feather_adv"

def getLabel():
    return "lp_Feather_adv"

def getVersion():
    return 1

def getGrouping():
    return "Filter"

def getPluginDescription():
    return "Feathers your alpha channel, with advanced control over the feather type as well as the falloff. Works only on the alpha.\n\nINPUTS\nimg = Connect the image you want to despot; despot will only happen in the alpha channel mask = A connected alpha will mask the operation, leaving the original alpha of the img-input\nmask = A connected alpha channel will mask out the operation\n\nHOW TO USE IT\nIt\'s pretty straight forward, just play with the erode- and feather-sliders as you need. The feather-type will determine if your feather goes omnidirectional or outwards/inwards of your shape (like the feather inside the Roto node). Different filters for both operations can be used.\nFurther, you can control the falloff. The smooth-operations work the same as in Nuke, with an added option to alter the operation manually.\n\nHOW DOES IT WORK\nThe \'omni\' feather is a simple, common blur which works best with eroding the alpha before to get a nice and even feather. The \'classic\' mode is enabled by an adjusted black respectively white point to maintain the original shape, so the blur only heads in one direction.\nThe falloff-operations are directly inspired from Nuke, where \'smooth0\' and \'smooth1\' have a bezier-curve going towards a linear black/white point (\'smooth0\' goes smooth from black, \'smooth1\' goes smooth from white); \'smooth\' has a bezier-curve for both points, forming a slight s-curve. The \'manual\' option is nothing more than a simple gamma-adjustment :)"

def createInstance(app,group):
    # Create all nodes in the group

    # Create the parameters of the group node the same way we did for all internal nodes
    lastNode = group

    # Create the user parameters
    lastNode.controls = lastNode.createPageParam("controls", "Controls")
    param = lastNode.createChoiceParam("feathertype", "feather type")
    entries = [ ("omni", ""),
    ("classic", "")]
    param.setOptions(entries)
    del entries

    # Add the param to the page
    lastNode.controls.addParam(param)

    # Set param properties
    param.setHelp("\'omni\' will blur in all directions. Positive and negative values deliver the same result.\n\n\'classic\' will only feather outwards or inwards of the original shape, just like the feather-function inside a roto.")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(True)
    lastNode.feathertype = param
    del param

    param = lastNode.createSeparatorParam("sep01", "")

    # Add the param to the page
    lastNode.controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setPersistent(False)
    param.setEvaluateOnChange(False)
    lastNode.sep01 = param
    del param

    param = lastNode.createDoubleParam("erodesize", "erode")
    param.setMinimum(-2147483648, 0)
    param.setMaximum(2147483647, 0)
    param.setDisplayMinimum(-50, 0)
    param.setDisplayMaximum(50, 0)

    # Add the param to the page
    lastNode.controls.addParam(param)

    # Set param properties
    param.setHelp("Erodes or dilates the edges of the alpha before the feather takes place.")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.erodesize = param
    del param

    param = lastNode.createChoiceParam("erodefilter", "filter")
    entries = [ ("default", ""),
    ("round", "")]
    param.setOptions(entries)
    del entries

    # Add the param to the page
    lastNode.controls.addParam(param)

    # Set param properties
    param.setHelp("Sets the filter for the erode/dilate operation.\n\n\'default\' is the filter of the Erode node. No idea what that is; maybe box? Anyways, it\'s that.\n\'round\' is the utilizes the filter of ErodeBlur.")
    param.setAddNewLine(False)
    param.setAnimationEnabled(True)
    lastNode.erodefilter = param
    del param

    param = lastNode.createDouble2DParam("feathersize", "feather")
    param.setMinimum(-2147483648, 0)
    param.setMaximum(2147483647, 0)
    param.setDisplayMinimum(-100, 0)
    param.setDisplayMaximum(100, 0)
    param.setMinimum(-2147483648, 1)
    param.setMaximum(2147483647, 1)
    param.setDisplayMinimum(-100, 1)
    param.setDisplayMaximum(100, 1)

    # Add the param to the page
    lastNode.controls.addParam(param)

    # Set param properties
    param.setHelp("Size of the feather. \nFor \'classic\' feather type, the scale is effectively half; where \'omni\' gives you 50px of feather at a size of 50, it would give you 25 (in either direction).\n\nnote: if \'classic\' feather is selected the individual control for horizontal and vertical feather might not work as anticipated. The sum of both values will determine if it feathers in (negative) or out (positive). You can not feather in and out seperately for the horizontal and vertical axis.")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.feathersize = param
    del param

    param = lastNode.createChoiceParam("Blur1filter", "filter")
    param.setDefaultValue(4)
    param.restoreDefaultValue()

    # Add the param to the page
    lastNode.controls.addParam(param)

    # Set param properties
    param.setHelp("Feather filter. The quasi-Gaussian filter should be appropriate in most cases. The Gaussian filter is more isotropic (its impulse response has rotational symmetry), but slower.")
    param.setAddNewLine(False)
    param.setAnimationEnabled(False)
    lastNode.Blur1filter = param
    del param

    param = lastNode.createSeparatorParam("sep02", "")

    # Add the param to the page
    lastNode.controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setPersistent(False)
    param.setEvaluateOnChange(False)
    lastNode.sep02 = param
    del param

    param = lastNode.createChoiceParam("falloff", "falloff")
    entries = [ ("linear", ""),
    ("smooth0", ""),
    ("smooth1", ""),
    ("smooth", ""),
    ("manual", "")]
    param.setOptions(entries)
    del entries

    # Add the param to the page
    lastNode.controls.addParam(param)

    # Set param properties
    param.setHelp("Linear leaves the falloff as it is.\n\nsmooth0 offers a faster falloff towards black.\n\nsmooth1 offers a slower falloff towards black.\n\nsmooth combines smooth0 and smooth1.\n\nmanual assignes a manual gamma-correction.")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.falloff = param
    del param

    param = lastNode.createDoubleParam("manualfalloff", " ")
    param.setMinimum(0, 0)
    param.setMaximum(2147483647, 0)
    param.setDisplayMinimum(0.001, 0)
    param.setDisplayMaximum(3, 0)
    param.setDefaultValue(1, 0)
    param.restoreDefaultValue(0)

    # Add the param to the page
    lastNode.controls.addParam(param)

    # Set param properties
    param.setHelp("Manual gamma-correction for the falloff; set the falloff to \'manual\' to utilize this.")
    param.setAddNewLine(False)
    param.setAnimationEnabled(True)
    lastNode.manualfalloff = param
    del param

    param = lastNode.createSeparatorParam("sep03", "")

    # Add the param to the page
    lastNode.controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setPersistent(False)
    param.setEvaluateOnChange(False)
    lastNode.sep03 = param
    del param

    param = lastNode.createBooleanParam("unpremulty", "(un)premult")

    # Add the param to the page
    lastNode.controls.addParam(param)

    # Set param properties
    param.setHelp("Unpremults the input before, and premults it again after all operations.")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.unpremulty = param
    del param

    param = lastNode.createBooleanParam("invmask", "invert mask")

    # Add the param to the page
    lastNode.controls.addParam(param)

    # Set param properties
    param.setHelp("Inverts the connected mask.\n\nDon\'t leave this checked when you have no mask connected.")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.invmask = param
    del param

    # Refresh the GUI with the newly created parameters
    lastNode.setPagesOrder(['controls', 'Node'])
    lastNode.refreshUserParamsGUI()
    del lastNode

    # Start of node "Blur1"
    lastNode = app.createNode("net.sf.cimg.CImgBlur", 4, group)
    lastNode.setScriptName("Blur1")
    lastNode.setLabel("Blur1")
    lastNode.setPosition(459, 277)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.8, 0.5, 0.3)
    groupBlur1 = lastNode

    param = lastNode.getParam("NatronOfxParamProcessR")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("NatronOfxParamProcessG")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("NatronOfxParamProcessB")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("size")
    if param is not None:
        param.setValue(0, 0)
        param.setValue(0, 1)
        del param

    param = lastNode.getParam("boundary")
    if param is not None:
        param.set("Nearest")
        del param

    param = lastNode.getParam("filter")
    if param is not None:
        param.set("Quadratic")
        del param

    del lastNode
    # End of node "Blur1"

    # Start of node "Grade1"
    lastNode = app.createNode("net.sf.openfx.GradePlugin", 2, group)
    lastNode.setScriptName("Grade1")
    lastNode.setLabel("Grade1")
    lastNode.setPosition(459, 369)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.48, 0.66, 1)
    groupGrade1 = lastNode

    param = lastNode.getParam("NatronOfxParamProcessR")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("NatronOfxParamProcessG")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("NatronOfxParamProcessB")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("NatronOfxParamProcessA")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("blackPoint")
    if param is not None:
        param.setValue(0, 0)
        param.setValue(0, 1)
        param.setValue(0, 2)
        param.setValue(0, 3)
        del param

    param = lastNode.getParam("whitePoint")
    if param is not None:
        param.setValue(1, 0)
        param.setValue(1, 1)
        param.setValue(1, 2)
        param.setValue(1, 3)
        del param

    param = lastNode.getParam("clampWhite")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("premultChanged")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("disableNode")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "Grade1"

    # Start of node "img"
    lastNode = app.createNode("fr.inria.built-in.Input", 1, group)
    lastNode.setScriptName("img")
    lastNode.setLabel("img")
    lastNode.setPosition(459, -218)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.3, 0.5, 0.2)
    groupimg = lastNode

    del lastNode
    # End of node "img"

    # Start of node "Output1"
    lastNode = app.createNode("fr.inria.built-in.Output", 1, group)
    lastNode.setLabel("Output1")
    lastNode.setPosition(459, 1113)
    lastNode.setSize(104, 31)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupOutput1 = lastNode

    del lastNode
    # End of node "Output1"

    # Start of node "smooth"
    lastNode = app.createNode("net.sf.openfx.ColorLookupPlugin", 1, group)
    lastNode.setScriptName("smooth")
    lastNode.setLabel("smooth")
    lastNode.setPosition(924, 543)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.48, 0.66, 1)
    groupsmooth = lastNode

    param = lastNode.getParam("hasBackgroundInteract")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("lookupTable")
    if param is not None:
        param.setCurveColor(0, 0.9, 0.9, 0.9)
        param.deleteAllControlPoints(0)
        param.addControlPoint(0, 0, 0, 1, 1, NatronEngine.Natron.KeyframeTypeEnum.eKeyframeTypeCubic)
        param.addControlPoint(0, 1, 1, 1, 1, NatronEngine.Natron.KeyframeTypeEnum.eKeyframeTypeCubic)
        param.setCurveColor(1, 0.7115, 0.1645, 0.1645)
        param.deleteAllControlPoints(1)
        param.addControlPoint(1, 0, 0, 1, 1, NatronEngine.Natron.KeyframeTypeEnum.eKeyframeTypeCubic)
        param.addControlPoint(1, 1, 1, 1, 1, NatronEngine.Natron.KeyframeTypeEnum.eKeyframeTypeCubic)
        param.setCurveColor(2, 0, 0.547, 0)
        param.deleteAllControlPoints(2)
        param.addControlPoint(2, 0, 0, 1, 1, NatronEngine.Natron.KeyframeTypeEnum.eKeyframeTypeCubic)
        param.addControlPoint(2, 1, 1, 1, 1, NatronEngine.Natron.KeyframeTypeEnum.eKeyframeTypeCubic)
        param.setCurveColor(3, 0.2885, 0.2885, 0.8355)
        param.deleteAllControlPoints(3)
        param.addControlPoint(3, 0, 0, 1, 1, NatronEngine.Natron.KeyframeTypeEnum.eKeyframeTypeCubic)
        param.addControlPoint(3, 1, 1, 1, 1, NatronEngine.Natron.KeyframeTypeEnum.eKeyframeTypeCubic)
        param.setCurveColor(4, 0.399, 0.399, 0.399)
        param.deleteAllControlPoints(4)
        param.addControlPoint(4, 0, 0, 0, 0, NatronEngine.Natron.KeyframeTypeEnum.eKeyframeTypeBroken)
        param.addControlPoint(4, 1, 1, 0, 0, NatronEngine.Natron.KeyframeTypeEnum.eKeyframeTypeFree)
        del param

    param = lastNode.getParam("clampBlack")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("clampWhite")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("premult")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("NatronOfxParamProcessR")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("NatronOfxParamProcessG")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("NatronOfxParamProcessB")
    if param is not None:
        param.setValue(False)
        del param

    del lastNode
    # End of node "smooth"

    # Start of node "Dot1"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot1")
    lastNode.setLabel("Dot1")
    lastNode.setPosition(504, 485)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot1 = lastNode

    del lastNode
    # End of node "Dot1"

    # Start of node "Dot2"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot2")
    lastNode.setLabel("Dot2")
    lastNode.setPosition(697, 485)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot2 = lastNode

    del lastNode
    # End of node "Dot2"

    # Start of node "manual"
    lastNode = app.createNode("net.sf.openfx.GradePlugin", 2, group)
    lastNode.setScriptName("manual")
    lastNode.setLabel("manual")
    lastNode.setPosition(1058, 543)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.48, 0.66, 1)
    groupmanual = lastNode

    param = lastNode.getParam("NatronOfxParamProcessR")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("NatronOfxParamProcessG")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("NatronOfxParamProcessB")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("NatronOfxParamProcessA")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("gamma")
    if param is not None:
        param.setValue(1, 0)
        param.setValue(1, 1)
        param.setValue(1, 2)
        param.setValue(1, 3)
        del param

    param = lastNode.getParam("clampWhite")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("premultChanged")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "manual"

    # Start of node "smooth0"
    lastNode = app.createNode("net.sf.openfx.ColorLookupPlugin", 1, group)
    lastNode.setScriptName("smooth0")
    lastNode.setLabel("smooth0")
    lastNode.setPosition(652, 543)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.48, 0.66, 1)
    groupsmooth0 = lastNode

    param = lastNode.getParam("hasBackgroundInteract")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("lookupTable")
    if param is not None:
        param.setCurveColor(0, 0.9, 0.9, 0.9)
        param.deleteAllControlPoints(0)
        param.addControlPoint(0, 0, 0, 1, 1, NatronEngine.Natron.KeyframeTypeEnum.eKeyframeTypeCubic)
        param.addControlPoint(0, 1, 1, 1, 1, NatronEngine.Natron.KeyframeTypeEnum.eKeyframeTypeCubic)
        param.setCurveColor(1, 0.7115, 0.1645, 0.1645)
        param.deleteAllControlPoints(1)
        param.addControlPoint(1, 0, 0, 1, 1, NatronEngine.Natron.KeyframeTypeEnum.eKeyframeTypeCubic)
        param.addControlPoint(1, 1, 1, 1, 1, NatronEngine.Natron.KeyframeTypeEnum.eKeyframeTypeCubic)
        param.setCurveColor(2, 0, 0.547, 0)
        param.deleteAllControlPoints(2)
        param.addControlPoint(2, 0, 0, 1, 1, NatronEngine.Natron.KeyframeTypeEnum.eKeyframeTypeCubic)
        param.addControlPoint(2, 1, 1, 1, 1, NatronEngine.Natron.KeyframeTypeEnum.eKeyframeTypeCubic)
        param.setCurveColor(3, 0.2885, 0.2885, 0.8355)
        param.deleteAllControlPoints(3)
        param.addControlPoint(3, 0, 0, 1, 1, NatronEngine.Natron.KeyframeTypeEnum.eKeyframeTypeCubic)
        param.addControlPoint(3, 1, 1, 1, 1, NatronEngine.Natron.KeyframeTypeEnum.eKeyframeTypeCubic)
        param.setCurveColor(4, 0.399, 0.399, 0.399)
        param.deleteAllControlPoints(4)
        param.addControlPoint(4, 0, 0, 0, 0, NatronEngine.Natron.KeyframeTypeEnum.eKeyframeTypeFree)
        param.addControlPoint(4, 1, 1, 1.5, 1.5, NatronEngine.Natron.KeyframeTypeEnum.eKeyframeTypeCubic)
        del param

    param = lastNode.getParam("clampBlack")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("clampWhite")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("premultChanged")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("NatronOfxParamProcessR")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("NatronOfxParamProcessG")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("NatronOfxParamProcessB")
    if param is not None:
        param.setValue(False)
        del param

    del lastNode
    # End of node "smooth0"

    # Start of node "ColorLookup1"
    lastNode = app.createNode("net.sf.openfx.ColorLookupPlugin", 1, group)
    lastNode.setScriptName("ColorLookup1")
    lastNode.setLabel("smooth1")
    lastNode.setPosition(794, 539)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.48, 0.66, 1)
    groupColorLookup1 = lastNode

    param = lastNode.getParam("hasBackgroundInteract")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("lookupTable")
    if param is not None:
        param.setCurveColor(0, 0.9, 0.9, 0.9)
        param.deleteAllControlPoints(0)
        param.addControlPoint(0, 0, 0, 1, 1, NatronEngine.Natron.KeyframeTypeEnum.eKeyframeTypeCubic)
        param.addControlPoint(0, 1, 1, 1, 1, NatronEngine.Natron.KeyframeTypeEnum.eKeyframeTypeCubic)
        param.setCurveColor(1, 0.7115, 0.1645, 0.1645)
        param.deleteAllControlPoints(1)
        param.addControlPoint(1, 0, 0, 1, 1, NatronEngine.Natron.KeyframeTypeEnum.eKeyframeTypeCubic)
        param.addControlPoint(1, 1, 1, 1, 1, NatronEngine.Natron.KeyframeTypeEnum.eKeyframeTypeCubic)
        param.setCurveColor(2, 0, 0.547, 0)
        param.deleteAllControlPoints(2)
        param.addControlPoint(2, 0, 0, 1, 1, NatronEngine.Natron.KeyframeTypeEnum.eKeyframeTypeCubic)
        param.addControlPoint(2, 1, 1, 1, 1, NatronEngine.Natron.KeyframeTypeEnum.eKeyframeTypeCubic)
        param.setCurveColor(3, 0.2885, 0.2885, 0.8355)
        param.deleteAllControlPoints(3)
        param.addControlPoint(3, 0, 0, 1, 1, NatronEngine.Natron.KeyframeTypeEnum.eKeyframeTypeCubic)
        param.addControlPoint(3, 1, 1, 1, 1, NatronEngine.Natron.KeyframeTypeEnum.eKeyframeTypeCubic)
        param.setCurveColor(4, 0.399, 0.399, 0.399)
        param.deleteAllControlPoints(4)
        param.addControlPoint(4, 0, 0, 0, 1.5, NatronEngine.Natron.KeyframeTypeEnum.eKeyframeTypeLinear)
        param.addControlPoint(4, 1, 1, 0, 0, NatronEngine.Natron.KeyframeTypeEnum.eKeyframeTypeFree)
        del param

    param = lastNode.getParam("clampBlack")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("clampWhite")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("premultChanged")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("NatronOfxParamProcessR")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("NatronOfxParamProcessG")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("NatronOfxParamProcessB")
    if param is not None:
        param.setValue(False)
        del param

    del lastNode
    # End of node "ColorLookup1"

    # Start of node "Dot3"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot3")
    lastNode.setLabel("Dot3")
    lastNode.setPosition(839, 485)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot3 = lastNode

    del lastNode
    # End of node "Dot3"

    # Start of node "Dot4"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot4")
    lastNode.setLabel("Dot4")
    lastNode.setPosition(969, 485)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot4 = lastNode

    del lastNode
    # End of node "Dot4"

    # Start of node "Switch1"
    lastNode = app.createNode("net.sf.openfx.switchPlugin", 1, group)
    lastNode.setScriptName("Switch1")
    lastNode.setLabel("Switch1")
    lastNode.setPosition(459, 725)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupSwitch1 = lastNode

    param = lastNode.getParam("which")
    if param is not None:
        param.setValue(0, 0)
        del param

    del lastNode
    # End of node "Switch1"

    # Start of node "Dot5"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot5")
    lastNode.setLabel("Dot5")
    lastNode.setPosition(1103, 485)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot5 = lastNode

    del lastNode
    # End of node "Dot5"

    # Start of node "Erode1"
    lastNode = app.createNode("net.sf.cimg.CImgErode", 2, group)
    lastNode.setScriptName("Erode1")
    lastNode.setLabel("Erode1")
    lastNode.setPosition(459, 39)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.8, 0.5, 0.3)
    groupErode1 = lastNode

    param = lastNode.getParam("NatronOfxParamProcessR")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("NatronOfxParamProcessG")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("NatronOfxParamProcessB")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("size")
    if param is not None:
        param.setValue(0, 0)
        param.setValue(0, 1)
        del param

    param = lastNode.getParam("premultChanged")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "Erode1"

    # Start of node "ErodeBlur1"
    lastNode = app.createNode("eu.cimg.ErodeBlur", 4, group)
    lastNode.setScriptName("ErodeBlur1")
    lastNode.setLabel("ErodeBlur1")
    lastNode.setPosition(633, 40)
    lastNode.setSize(80, 43)
    lastNode.setColor(0.8, 0.5, 0.3)
    groupErodeBlur1 = lastNode

    param = lastNode.getParam("size")
    if param is not None:
        param.setValue(0, 0)
        del param

    param = lastNode.getParam("cropToFormat")
    if param is not None:
        param.setValue(False)
        del param

    del lastNode
    # End of node "ErodeBlur1"

    # Start of node "Dot6"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot6")
    lastNode.setLabel("Dot6")
    lastNode.setPosition(504, -27)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot6 = lastNode

    del lastNode
    # End of node "Dot6"

    # Start of node "erodefilterswitch"
    lastNode = app.createNode("net.sf.openfx.switchPlugin", 1, group)
    lastNode.setScriptName("erodefilterswitch")
    lastNode.setLabel("erodefilterswitch")
    lastNode.setPosition(459, 188)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.3, 0.37, 0.776)
    grouperodefilterswitch = lastNode

    param = lastNode.getParam("which")
    if param is not None:
        param.setValue(0, 0)
        del param

    del lastNode
    # End of node "erodefilterswitch"

    # Start of node "Unpremult1"
    lastNode = app.createNode("net.sf.openfx.Unpremult", 2, group)
    lastNode.setScriptName("Unpremult1")
    lastNode.setLabel("Unpremult1")
    lastNode.setPosition(459, -116)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupUnpremult1 = lastNode

    param = lastNode.getParam("disableNode")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "Unpremult1"

    # Start of node "Premult1"
    lastNode = app.createNode("net.sf.openfx.Premult", 2, group)
    lastNode.setScriptName("Premult1")
    lastNode.setLabel("Premult1")
    lastNode.setPosition(459, 995)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupPremult1 = lastNode

    param = lastNode.getParam("disableNode")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "Premult1"

    # Start of node "mask"
    lastNode = app.createNode("fr.inria.built-in.Input", 1, group)
    lastNode.setScriptName("mask")
    lastNode.setLabel("mask")
    lastNode.setPosition(711, 766)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.3, 0.5, 0.2)
    groupmask = lastNode

    param = lastNode.getParam("optional")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("isMask")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "mask"

    # Start of node "Merge1"
    lastNode = app.createNode("net.sf.openfx.MergePlugin", 1, group)
    lastNode.setScriptName("Merge1")
    lastNode.setLabel("Merge1")
    lastNode.setPosition(459, 853)
    lastNode.setSize(104, 66)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupMerge1 = lastNode

    param = lastNode.getParam("NatronOfxParamStringSublabelName")
    if param is not None:
        param.setValue("copy")
        del param

    param = lastNode.getParam("operation")
    if param is not None:
        param.set("copy")
        del param

    param = lastNode.getParam("maskInvert")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("enableMask_Mask")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "Merge1"

    # Start of node "Dot7"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot7")
    lastNode.setLabel("Dot7")
    lastNode.setPosition(327, 879)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot7 = lastNode

    del lastNode
    # End of node "Dot7"

    # Start of node "Dot8"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot8")
    lastNode.setLabel("Dot8")
    lastNode.setPosition(327, -27)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot8 = lastNode

    del lastNode
    # End of node "Dot8"

    # Start of node "Dot9"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot9")
    lastNode.setLabel("Dot9")
    lastNode.setPosition(756, 879)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot9 = lastNode

    del lastNode
    # End of node "Dot9"

    # Start of node "Dot10"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot10")
    lastNode.setLabel("Dot10")
    lastNode.setPosition(666, -27)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot10 = lastNode

    del lastNode
    # End of node "Dot10"

    # Start of node "Dot11"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot11")
    lastNode.setLabel("Dot11")
    lastNode.setPosition(666, 202)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot11 = lastNode

    del lastNode
    # End of node "Dot11"

    # Now that all nodes are created we can connect them together, restore expressions
    groupBlur1.connectInput(0, grouperodefilterswitch)
    groupGrade1.connectInput(0, groupBlur1)
    groupOutput1.connectInput(0, groupPremult1)
    groupsmooth.connectInput(0, groupDot4)
    groupDot1.connectInput(0, groupGrade1)
    groupDot2.connectInput(0, groupDot1)
    groupmanual.connectInput(0, groupDot5)
    groupsmooth0.connectInput(0, groupDot2)
    groupColorLookup1.connectInput(0, groupDot3)
    groupDot3.connectInput(0, groupDot2)
    groupDot4.connectInput(0, groupDot3)
    groupSwitch1.connectInput(0, groupDot1)
    groupSwitch1.connectInput(1, groupsmooth0)
    groupSwitch1.connectInput(2, groupColorLookup1)
    groupSwitch1.connectInput(3, groupsmooth)
    groupSwitch1.connectInput(4, groupmanual)
    groupDot5.connectInput(0, groupDot4)
    groupErode1.connectInput(0, groupDot6)
    groupErodeBlur1.connectInput(0, groupDot10)
    groupDot6.connectInput(0, groupUnpremult1)
    grouperodefilterswitch.connectInput(0, groupErode1)
    grouperodefilterswitch.connectInput(1, groupDot11)
    groupUnpremult1.connectInput(0, groupimg)
    groupPremult1.connectInput(0, groupMerge1)
    groupMerge1.connectInput(0, groupSwitch1)
    groupMerge1.connectInput(1, groupDot7)
    groupMerge1.connectInput(2, groupDot9)
    groupDot7.connectInput(0, groupDot8)
    groupDot8.connectInput(0, groupDot6)
    groupDot9.connectInput(0, groupmask)
    groupDot10.connectInput(0, groupDot6)
    groupDot11.connectInput(0, groupErodeBlur1)

    param = groupBlur1.getParam("size")
    param.setExpression("if thisGroup.feathersize.get()[dimension] < 0:\n\tret = thisGroup.feathersize.get()[dimension]*-1\nelse:\n\tret = thisGroup.feathersize.get()[dimension]", True, 0)
    param.setExpression("if thisGroup.feathersize.get()[dimension] < 0:\n\tret = thisGroup.feathersize.get()[dimension]*-1\nelse:\n\tret = thisGroup.feathersize.get()[dimension]", True, 1)
    del param
    param = groupBlur1.getParam("filter")
    group.getParam("Blur1filter").setAsAlias(param)
    del param
    param = groupGrade1.getParam("blackPoint")
    param.setExpression("plusminus = thisGroup.feathersize.get()[0] + thisGroup.feathersize.get()[1]\nif plusminus < 0:\n\tret = .5\nelse:\n\tret = 0", True, 0)
    param.setExpression("plusminus = thisGroup.feathersize.get()[0] + thisGroup.feathersize.get()[1]\nif plusminus < 0:\n\tret = .5\nelse:\n\tret = 0", True, 1)
    param.setExpression("plusminus = thisGroup.feathersize.get()[0] + thisGroup.feathersize.get()[1]\nif plusminus < 0:\n\tret = .5\nelse:\n\tret = 0", True, 2)
    param.setExpression("plusminus = thisGroup.feathersize.get()[0] + thisGroup.feathersize.get()[1]\nif plusminus < 0:\n\tret = .5\nelse:\n\tret = 0", True, 3)
    del param
    param = groupGrade1.getParam("whitePoint")
    param.setExpression("plusminusw = thisGroup.feathersize.get()[0] + thisGroup.feathersize.get()[1]\nif plusminusw > 0:\n\tret = .5\nelse:\n\tret = 1", True, 0)
    param.setExpression("plusminusw = thisGroup.feathersize.get()[0] + thisGroup.feathersize.get()[1]\nif plusminusw > 0:\n\tret = .5\nelse:\n\tret = 1", True, 1)
    param.setExpression("plusminusw = thisGroup.feathersize.get()[0] + thisGroup.feathersize.get()[1]\nif plusminusw > 0:\n\tret = .5\nelse:\n\tret = 1", True, 2)
    param.setExpression("plusminusw = thisGroup.feathersize.get()[0] + thisGroup.feathersize.get()[1]\nif plusminusw > 0:\n\tret = .5\nelse:\n\tret = 1", True, 3)
    del param
    param = groupGrade1.getParam("disableNode")
    param.setExpression("1-thisGroup.feathertype.get()", False, 0)
    del param
    param = groupmanual.getParam("gamma")
    param.setExpression("thisGroup.manualfalloff.get()", False, 0)
    param.setExpression("thisGroup.manualfalloff.get()", False, 1)
    param.setExpression("thisGroup.manualfalloff.get()", False, 2)
    param.setExpression("thisGroup.manualfalloff.get()", False, 3)
    del param
    param = groupSwitch1.getParam("which")
    param.setExpression("thisGroup.falloff.get()", False, 0)
    del param
    param = groupErode1.getParam("size")
    param.setExpression("thisGroup.erodesize.get()", False, 0)
    param.setExpression("thisGroup.erodesize.get()", False, 1)
    del param
    param = groupErodeBlur1.getParam("size")
    param.setExpression("thisGroup.Erode1.size.get()[dimension]", False, 0)
    del param
    param = grouperodefilterswitch.getParam("which")
    param.setExpression("thisGroup.erodefilter.get()", False, 0)
    del param
    param = groupUnpremult1.getParam("disableNode")
    param.setExpression("1-thisGroup.unpremulty.get()", False, 0)
    del param
    param = groupPremult1.getParam("disableNode")
    param.setExpression("1-thisGroup.unpremulty.get()", False, 0)
    del param
    param = groupMerge1.getParam("maskInvert")
    param.setExpression("thisGroup.invmask.get()", False, 0)
    del param

    try:
        extModule = sys.modules["lp_Feather_advExt"]
    except KeyError:
        extModule = None
    if extModule is not None and hasattr(extModule ,"createInstanceExt") and hasattr(extModule.createInstanceExt,"__call__"):
        extModule.createInstanceExt(app,group)
