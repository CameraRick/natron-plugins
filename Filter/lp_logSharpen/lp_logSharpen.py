# -*- coding: utf-8 -*-
# DO NOT EDIT THIS FILE
# This file was automatically generated by Natron PyPlug exporter version 10.

# Hand-written code should be added in a separate file named lp_logSharpenExt.py
# See http://natron.readthedocs.org/en/master/groups.html#adding-hand-written-code-callbacks-etc
# Note that Viewers are never exported

import NatronEngine
import sys

# Try to import the extensions file where callbacks and hand-written code should be located.
try:
    from lp_logSharpenExt import *
except ImportError:
    pass

def getPluginID():
    return "lp_logSharpen"

def getLabel():
    return "lp_logSharpen"

def getVersion():
    return 1

def getGrouping():
    return "Community/Filter"

def getPluginDescription():
    return "Sharpens the image in LOG space to get around typical dark edges. Also features a high-pass sharpening method that can even be utilized to soften skintones.\n\nINPUTS\nimg = Connect the image you want to sharpen\nmask = You know what it\'s for :)\n\nHOW TO USE IT\nAdjust the amount and size to get to your sharpen-needs. The size will set the radius of the operation, while the amount will set how much the image will be sharpened.\nAn integrated edge detection with preview-options can be used to more effectively tackle areas which you usually want to sharpen.\nTo make use of the soften-function of high-pass, you can shift the amount to a low negative value; you don\'t want to go lower than -2. Also, you might want to process the image in LIN.\n\nHOW DOES IT WORK\n\'Sharpen\'-type is based on a simple laplacian-operation (subtracting a blurred version of the source from itself, adding it on top afterwards).\n\'High-pass\' starts with the same approach, but adds the results on a middle grey which gets applied with an overlay, this can lead to more subtle yet effective results. This approach differs from the usual way of creating a high-pass (blurring and inverting the source, afterwards generating an average), but gives the ability to amplify the effect properly."

def createInstance(app,group):
    # Create all nodes in the group

    # Create the parameters of the group node the same way we did for all internal nodes
    lastNode = group

    # Create the user parameters
    lastNode.Controls = lastNode.createPageParam("Controls", "Controls")
    param = lastNode.createChoiceParam("sharpchoice", "type")
    entries = [ ("sharpen", ""),
    ("high-pass", "")]
    param.setOptions(entries)
    del entries

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("\"Sharpen\" uses a classic sharpen approach based on a laplacian. \n\"High-pass\" creates a Photoshop-like high pass (high frquencies on a middle grey) and applies it with an overlay-operation; works also great for softening skin when amount set to negative.")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.sharpchoice = param
    del param

    param = lastNode.createSeparatorParam("sep01", " ")

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp(" ")
    param.setAddNewLine(True)
    param.setPersistent(False)
    param.setEvaluateOnChange(False)
    lastNode.sep01 = param
    del param

    param = lastNode.createDoubleParam("sharpamount", "amount")
    param.setMinimum(-2147483648, 0)
    param.setMaximum(2147483647, 0)
    param.setDisplayMinimum(-3, 0)
    param.setDisplayMaximum(10, 0)
    param.setDefaultValue(1, 0)
    param.restoreDefaultValue(0)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("Sets the amount of sharpening applied to the image.")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.sharpamount = param
    del param

    param = lastNode.createChoiceParam("Sharpen1filter", "filter")
    param.setDefaultValue(1)
    param.restoreDefaultValue()

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setAddNewLine(False)
    param.setAnimationEnabled(False)
    lastNode.Sharpen1filter = param
    del param

    param = lastNode.createDoubleParam("sharpradius", "size")
    param.setMinimum(-2147483648, 0)
    param.setMaximum(2147483647, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(20, 0)
    param.setDefaultValue(5, 0)
    param.restoreDefaultValue(0)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("Sets the size of the sharpen operation; translates directly to the blur-radius of the underlying laplacian \noiperation.")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.sharpradius = param
    del param

    param = lastNode.createDoubleParam("hpblur", "high-pass blur")
    param.setMinimum(-2147483648, 0)
    param.setMaximum(2147483647, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(20, 0)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("Blurs the high frequencies before applying it to the source.")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.hpblur = param
    del param

    param = lastNode.createBooleanParam("logswitch", "process in lin")

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("Processes the image in lin rather than log; this may work better for high-pass operation.")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.logswitch = param
    del param

    param = lastNode.createBooleanParam("invmask", "invert mask")

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("Inverts the connected mask.")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.invmask = param
    del param

    lastNode.edgedetect = lastNode.createPageParam("edgedetect", "Edge detect")
    param = lastNode.createBooleanParam("actedge", "activate")

    # Add the param to the page
    lastNode.edgedetect.addParam(param)

    # Set param properties
    param.setHelp("Activates the integrated edge detection.")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.actedge = param
    del param

    param = lastNode.createBooleanParam("prevedge", "preview")

    # Add the param to the page
    lastNode.edgedetect.addParam(param)

    # Set param properties
    param.setHelp("Preview the edge detection for easier setup.")
    param.setAddNewLine(False)
    param.setAnimationEnabled(True)
    lastNode.prevedge = param
    del param

    param = lastNode.createBooleanParam("invedge", "invert")

    # Add the param to the page
    lastNode.edgedetect.addParam(param)

    # Set param properties
    param.setHelp("Inverts the edge detection, this is good for softening features in high-pass mode.")
    param.setAddNewLine(False)
    param.setAnimationEnabled(True)
    lastNode.invedge = param
    del param

    param = lastNode.createDoubleParam("thresedge", "threshold")
    param.setMinimum(-1, 0)
    param.setMaximum(1, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(1, 0)
    param.setDefaultValue(0.3, 0)
    param.restoreDefaultValue(0)

    # Add the param to the page
    lastNode.edgedetect.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.thresedge = param
    del param

    param = lastNode.createDoubleParam("preblur", "pre-blur")
    param.setMinimum(-2147483648, 0)
    param.setMaximum(2147483647, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(20, 0)

    # Add the param to the page
    lastNode.edgedetect.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.preblur = param
    del param

    param = lastNode.createDoubleParam("erodeedge", "erode")
    param.setMinimum(-2147483648, 0)
    param.setMaximum(2147483647, 0)
    param.setDisplayMinimum(-10, 0)
    param.setDisplayMaximum(10, 0)

    # Add the param to the page
    lastNode.edgedetect.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.erodeedge = param
    del param

    param = lastNode.createDoubleParam("postblur", "post-blur")
    param.setMinimum(-2147483648, 0)
    param.setMaximum(2147483647, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(20, 0)
    param.setDefaultValue(4, 0)
    param.restoreDefaultValue(0)

    # Add the param to the page
    lastNode.edgedetect.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.postblur = param
    del param

    # Refresh the GUI with the newly created parameters
    lastNode.setPagesOrder(['Controls', 'edgedetect', 'Node', 'Settings'])
    lastNode.refreshUserParamsGUI()
    del lastNode

    # Start of node "Dot1"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot1")
    lastNode.setLabel("Dot1")
    lastNode.setPosition(1514, 390)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot1 = lastNode

    del lastNode
    # End of node "Dot1"

    # Start of node "Sharpen1"
    lastNode = app.createNode("net.sf.cimg.CImgSharpen", 4, group)
    lastNode.setScriptName("Sharpen1")
    lastNode.setLabel("Sharpen1")
    lastNode.setPosition(1469, 1028)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.8, 0.5, 0.3)
    groupSharpen1 = lastNode

    param = lastNode.getParam("amount")
    if param is not None:
        param.setValue(1, 0)
        del param

    param = lastNode.getParam("size")
    if param is not None:
        param.setValue(5, 0)
        param.setValue(5, 1)
        del param

    del lastNode
    # End of node "Sharpen1"

    # Start of node "Dot2"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot2")
    lastNode.setLabel("Dot2")
    lastNode.setPosition(1514, 868)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot2 = lastNode

    del lastNode
    # End of node "Dot2"

    # Start of node "Merge1"
    lastNode = app.createNode("net.sf.openfx.MergePlugin", 1, group)
    lastNode.setScriptName("Merge1")
    lastNode.setLabel("Merge1")
    lastNode.setPosition(1762, 1139)
    lastNode.setSize(104, 66)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupMerge1 = lastNode

    param = lastNode.getParam("operation")
    if param is not None:
        param.set("overlay")
        del param

    param = lastNode.getParam("BChannelsA")
    if param is not None:
        param.setValue(False)
        del param

    del lastNode
    # End of node "Merge1"

    # Start of node "Dot4"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot4")
    lastNode.setLabel("Dot4")
    lastNode.setPosition(1807, 868)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot4 = lastNode

    del lastNode
    # End of node "Dot4"

    # Start of node "Switch1"
    lastNode = app.createNode("net.sf.openfx.switchPlugin", 1, group)
    lastNode.setScriptName("Switch1")
    lastNode.setLabel("Switch1")
    lastNode.setPosition(1469, 1151)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupSwitch1 = lastNode

    param = lastNode.getParam("which")
    if param is not None:
        param.setValue(0, 0)
        del param

    del lastNode
    # End of node "Switch1"

    # Start of node "Dot5"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot5")
    lastNode.setLabel("Dot5")
    lastNode.setPosition(1514, 608)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot5 = lastNode

    del lastNode
    # End of node "Dot5"

    # Start of node "Merge2"
    lastNode = app.createNode("net.sf.openfx.MergePlugin", 1, group)
    lastNode.setScriptName("Merge2")
    lastNode.setLabel("Merge2")
    lastNode.setPosition(2157, 716)
    lastNode.setSize(104, 66)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupMerge2 = lastNode

    param = lastNode.getParam("operation")
    if param is not None:
        param.set("from")
        del param

    param = lastNode.getParam("AChannelsA")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("BChannelsA")
    if param is not None:
        param.setValue(False)
        del param

    del lastNode
    # End of node "Merge2"

    # Start of node "Dot6"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot6")
    lastNode.setLabel("Dot6")
    lastNode.setPosition(2202, 608)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot6 = lastNode

    del lastNode
    # End of node "Dot6"

    # Start of node "Blur1"
    lastNode = app.createNode("net.sf.cimg.CImgBlur", 4, group)
    lastNode.setScriptName("Blur1")
    lastNode.setLabel("Blur1")
    lastNode.setPosition(2296, 661)
    lastNode.setSize(104, 55)
    lastNode.setColor(0.8, 0.5, 0.3)
    groupBlur1 = lastNode

    param = lastNode.getParam("size")
    if param is not None:
        param.setValue(5, 0)
        param.setValue(5, 1)
        del param

    param = lastNode.getParam("userTextArea")
    if param is not None:
        param.setValue("<font size=\"6\" color=\"#000000\" face=\"Droid Sans\">high pass</font>")
        del param

    del lastNode
    # End of node "Blur1"

    # Start of node "Dot7"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot7")
    lastNode.setLabel("Dot7")
    lastNode.setPosition(2341, 608)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot7 = lastNode

    del lastNode
    # End of node "Dot7"

    # Start of node "Dot8"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot8")
    lastNode.setLabel("Dot8")
    lastNode.setPosition(2341, 742)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot8 = lastNode

    del lastNode
    # End of node "Dot8"

    # Start of node "Multiply1"
    lastNode = app.createNode("net.sf.openfx.MultiplyPlugin", 2, group)
    lastNode.setScriptName("Multiply1")
    lastNode.setLabel("Multiply1")
    lastNode.setPosition(2157, 836)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.48, 0.66, 1)
    groupMultiply1 = lastNode

    param = lastNode.getParam("value")
    if param is not None:
        param.setValue(1, 0)
        param.setValue(1, 1)
        param.setValue(1, 2)
        param.setValue(1, 3)
        del param

    param = lastNode.getParam("premultChanged")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "Multiply1"

    # Start of node "Blur2"
    lastNode = app.createNode("net.sf.cimg.CImgBlur", 4, group)
    lastNode.setScriptName("Blur2")
    lastNode.setLabel("Blur2")
    lastNode.setPosition(2157, 927)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.8, 0.5, 0.3)
    groupBlur2 = lastNode

    param = lastNode.getParam("size")
    if param is not None:
        param.setValue(0, 0)
        param.setValue(0, 1)
        del param

    del lastNode
    # End of node "Blur2"

    # Start of node "Merge3"
    lastNode = app.createNode("net.sf.openfx.MergePlugin", 1, group)
    lastNode.setScriptName("Merge3")
    lastNode.setLabel("Merge3")
    lastNode.setPosition(2157, 1035)
    lastNode.setSize(104, 66)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupMerge3 = lastNode

    param = lastNode.getParam("AChannelsA")
    if param is not None:
        param.setValue(False)
        del param

    del lastNode
    # End of node "Merge3"

    # Start of node "Grade1"
    lastNode = app.createNode("net.sf.openfx.GradePlugin", 2, group)
    lastNode.setScriptName("Grade1")
    lastNode.setLabel("Grade1")
    lastNode.setPosition(2414, 867)
    lastNode.setSize(104, 78)
    lastNode.setColor(0.48, 0.66, 1)
    groupGrade1 = lastNode

    param = lastNode.getParam("multiply")
    if param is not None:
        param.setValue(0, 0)
        param.setValue(0, 1)
        param.setValue(0, 2)
        param.setValue(0, 3)
        del param

    param = lastNode.getParam("offset")
    if param is not None:
        param.setValue(0.5, 0)
        param.setValue(0.5, 1)
        param.setValue(0.5, 2)
        param.setValue(0.5, 3)
        del param

    param = lastNode.getParam("clampBlack")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("userTextArea")
    if param is not None:
        param.setValue("<font size=\"6\" color=\"#000000\" face=\"Droid Sans\">middle grey from image</font>")
        del param

    del lastNode
    # End of node "Grade1"

    # Start of node "Dot9"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot9")
    lastNode.setLabel("Dot9")
    lastNode.setPosition(2459, 608)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot9 = lastNode

    del lastNode
    # End of node "Dot9"

    # Start of node "Dot10"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot10")
    lastNode.setLabel("Dot10")
    lastNode.setPosition(2459, 1061)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot10 = lastNode

    del lastNode
    # End of node "Dot10"

    # Start of node "Dot11"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot11")
    lastNode.setLabel("Dot11")
    lastNode.setPosition(2202, 1165)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot11 = lastNode

    del lastNode
    # End of node "Dot11"

    # Start of node "KeyMix1"
    lastNode = app.createNode("net.sf.openfx.KeyMix", 1, group)
    lastNode.setScriptName("KeyMix1")
    lastNode.setLabel("KeyMix1")
    lastNode.setPosition(1481, 1270)
    lastNode.setSize(80, 43)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupKeyMix1 = lastNode

    param = lastNode.getParam("enableMask_Mask")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("maskChannel_Mask")
    if param is not None:
        param.set("uk.co.thefoundry.OfxImagePlaneColour.R")
        del param

    param = lastNode.getParam("disableNode")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "KeyMix1"

    # Start of node "Dot12"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot12")
    lastNode.setLabel("Dot12")
    lastNode.setPosition(1417, 1280)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot12 = lastNode

    del lastNode
    # End of node "Dot12"

    # Start of node "Dot13"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot13")
    lastNode.setLabel("Dot13")
    lastNode.setPosition(1417, 868)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot13 = lastNode

    del lastNode
    # End of node "Dot13"

    # Start of node "EdgeDetect1"
    lastNode = app.createNode("eu.cimg.EdgeDetect", 4, group)
    lastNode.setScriptName("EdgeDetect1")
    lastNode.setLabel("EdgeDetect1")
    lastNode.setPosition(2668, 739)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.8, 0.5, 0.3)
    groupEdgeDetect1 = lastNode

    param = lastNode.getParam("filter")
    if param is not None:
        param.set("sobel")
        del param

    param = lastNode.getParam("premultChanged")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "EdgeDetect1"

    # Start of node "Dot14"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot14")
    lastNode.setLabel("Dot14")
    lastNode.setPosition(2713, 390)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot14 = lastNode

    del lastNode
    # End of node "Dot14"

    # Start of node "Dot15"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot15")
    lastNode.setLabel("Dot15")
    lastNode.setPosition(2713, 613)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot15 = lastNode

    del lastNode
    # End of node "Dot15"

    # Start of node "Blur3"
    lastNode = app.createNode("net.sf.cimg.CImgBlur", 4, group)
    lastNode.setScriptName("Blur3")
    lastNode.setLabel("Blur3")
    lastNode.setPosition(2668, 983)
    lastNode.setSize(104, 55)
    lastNode.setColor(0.8, 0.5, 0.3)
    groupBlur3 = lastNode

    param = lastNode.getParam("size")
    if param is not None:
        param.setValue(4, 0)
        param.setValue(4, 1)
        del param

    param = lastNode.getParam("userTextArea")
    if param is not None:
        param.setValue("<font size=\"6\" color=\"#000000\" face=\"Droid Sans\">post-blur</font>")
        del param

    del lastNode
    # End of node "Blur3"

    # Start of node "Invert1"
    lastNode = app.createNode("net.sf.openfx.Invert", 2, group)
    lastNode.setScriptName("Invert1")
    lastNode.setLabel("Invert1")
    lastNode.setPosition(2668, 1083)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.48, 0.66, 1)
    groupInvert1 = lastNode

    param = lastNode.getParam("disableNode")
    if param is not None:
        param.setValue(False)
        del param

    del lastNode
    # End of node "Invert1"

    # Start of node "Dot16"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot16")
    lastNode.setLabel("Dot16")
    lastNode.setPosition(2713, 1280)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot16 = lastNode

    del lastNode
    # End of node "Dot16"

    # Start of node "Switch2"
    lastNode = app.createNode("net.sf.openfx.switchPlugin", 1, group)
    lastNode.setScriptName("Switch2")
    lastNode.setLabel("Switch2")
    lastNode.setPosition(1469, 1494)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupSwitch2 = lastNode

    param = lastNode.getParam("which")
    if param is not None:
        param.setValue(0, 0)
        del param

    del lastNode
    # End of node "Switch2"

    # Start of node "Dot17"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot17")
    lastNode.setLabel("Dot17")
    lastNode.setPosition(2713, 1508)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot17 = lastNode

    del lastNode
    # End of node "Dot17"

    # Start of node "KeyMix2"
    lastNode = app.createNode("net.sf.openfx.KeyMix", 1, group)
    lastNode.setScriptName("KeyMix2")
    lastNode.setLabel("KeyMix2")
    lastNode.setPosition(1481, 1615)
    lastNode.setSize(80, 43)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupKeyMix2 = lastNode

    param = lastNode.getParam("enableMask_Mask")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "KeyMix2"

    # Start of node "Dot18"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot18")
    lastNode.setLabel("Dot18")
    lastNode.setPosition(2923, 613)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot18 = lastNode

    del lastNode
    # End of node "Dot18"

    # Start of node "Dot19"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot19")
    lastNode.setLabel("Dot19")
    lastNode.setPosition(2923, 1629)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot19 = lastNode

    del lastNode
    # End of node "Dot19"

    # Start of node "img"
    lastNode = app.createNode("fr.inria.built-in.Input", 1, group)
    lastNode.setScriptName("img")
    lastNode.setLabel("img")
    lastNode.setPosition(1469, 236)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.3, 0.5, 0.2)
    groupimg = lastNode

    del lastNode
    # End of node "img"

    # Start of node "Output1"
    lastNode = app.createNode("fr.inria.built-in.Output", 1, group)
    lastNode.setLabel("Output1")
    lastNode.setPosition(1469, 1878)
    lastNode.setSize(104, 31)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupOutput1 = lastNode

    del lastNode
    # End of node "Output1"

    # Start of node "Invert2"
    lastNode = app.createNode("net.sf.openfx.Invert", 2, group)
    lastNode.setScriptName("Invert2")
    lastNode.setLabel("Invert2")
    lastNode.setPosition(1046, 1542)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.48, 0.66, 1)
    groupInvert2 = lastNode

    param = lastNode.getParam("premult")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("disableNode")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "Invert2"

    # Start of node "Dot20"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot20")
    lastNode.setLabel("Dot20")
    lastNode.setPosition(1091, 1629)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot20 = lastNode

    del lastNode
    # End of node "Dot20"

    # Start of node "mask"
    lastNode = app.createNode("fr.inria.built-in.Input", 1, group)
    lastNode.setScriptName("mask")
    lastNode.setLabel("mask")
    lastNode.setPosition(1046, 1165)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.3, 0.5, 0.2)
    groupmask = lastNode

    param = lastNode.getParam("optional")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("isMask")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "mask"

    # Start of node "Grade2"
    lastNode = app.createNode("net.sf.openfx.GradePlugin", 2, group)
    lastNode.setScriptName("Grade2")
    lastNode.setLabel("Grade2")
    lastNode.setPosition(2668, 811)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.48, 0.66, 1)
    groupGrade2 = lastNode

    param = lastNode.getParam("blackPoint")
    if param is not None:
        param.setValue(0.03, 0)
        param.setValue(0.03, 1)
        param.setValue(0.03, 2)
        param.setValue(0.03, 3)
        del param

    param = lastNode.getParam("whitePoint")
    if param is not None:
        param.setValue(0.1, 0)
        param.setValue(0.1, 1)
        param.setValue(0.1, 2)
        param.setValue(0.1, 3)
        del param

    param = lastNode.getParam("clampWhite")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "Grade2"

    # Start of node "ErodeSmooth2"
    lastNode = app.createNode("net.sf.cimg.CImgErodeSmooth", 2, group)
    lastNode.setScriptName("ErodeSmooth2")
    lastNode.setLabel("ErodeSmooth1")
    lastNode.setPosition(2668, 894)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.8, 0.5, 0.3)
    groupErodeSmooth2 = lastNode

    param = lastNode.getParam("size")
    if param is not None:
        param.setValue(0, 0)
        param.setValue(0, 1)
        del param

    del lastNode
    # End of node "ErodeSmooth2"

    # Start of node "Blur4"
    lastNode = app.createNode("net.sf.cimg.CImgBlur", 4, group)
    lastNode.setScriptName("Blur4")
    lastNode.setLabel("Blur4")
    lastNode.setPosition(2668, 656)
    lastNode.setSize(104, 55)
    lastNode.setColor(0.8, 0.5, 0.3)
    groupBlur4 = lastNode

    param = lastNode.getParam("size")
    if param is not None:
        param.setValue(0, 0)
        param.setValue(0, 1)
        del param

    param = lastNode.getParam("userTextArea")
    if param is not None:
        param.setValue("<font size=\"6\" color=\"#000000\" face=\"Droid Sans\">pre-blur</font>")
        del param

    del lastNode
    # End of node "Blur4"

    # Start of node "Log2Lin1"
    lastNode = app.createNode("net.sf.openfx.Log2Lin", 1, group)
    lastNode.setScriptName("Log2Lin1")
    lastNode.setLabel("Log2Lin1")
    lastNode.setPosition(1481, 494)
    lastNode.setSize(80, 43)
    lastNode.setColor(0.48, 0.66, 1)
    groupLog2Lin1 = lastNode

    param = lastNode.getParam("operation")
    if param is not None:
        param.set("lin2log")
        del param

    param = lastNode.getParam("disableNode")
    if param is not None:
        param.setValue(False)
        del param

    del lastNode
    # End of node "Log2Lin1"

    # Start of node "Log2Lin2"
    lastNode = app.createNode("net.sf.openfx.Log2Lin", 1, group)
    lastNode.setScriptName("Log2Lin2")
    lastNode.setLabel("Log2Lin2")
    lastNode.setPosition(1481, 1377)
    lastNode.setSize(80, 43)
    lastNode.setColor(0.48, 0.66, 1)
    groupLog2Lin2 = lastNode

    param = lastNode.getParam("disableNode")
    if param is not None:
        param.setValue(False)
        del param

    del lastNode
    # End of node "Log2Lin2"

    # Start of node "Constant1"
    lastNode = app.createNode("net.sf.openfx.ConstantPlugin", 1, group)
    lastNode.setScriptName("Constant1")
    lastNode.setLabel("Constant1")
    lastNode.setPosition(1232, 1364)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.3, 0.5, 0.2)
    groupConstant1 = lastNode

    param = lastNode.getParam("NatronParamFormatChoice")
    if param is not None:
        param.set("PC_Video")
        del param

    del lastNode
    # End of node "Constant1"

    # Start of node "Dot3"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot3")
    lastNode.setLabel("Dot3")
    lastNode.setPosition(1277, 1280)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot3 = lastNode

    del lastNode
    # End of node "Dot3"

    # Start of node "Merge4"
    lastNode = app.createNode("net.sf.openfx.MergePlugin", 1, group)
    lastNode.setScriptName("Merge4")
    lastNode.setLabel("Merge4")
    lastNode.setPosition(1046, 1424)
    lastNode.setSize(104, 66)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupMerge4 = lastNode

    param = lastNode.getParam("operation")
    if param is not None:
        param.set("under")
        del param

    del lastNode
    # End of node "Merge4"

    # Start of node "Constant3"
    lastNode = app.createNode("net.sf.openfx.ConstantPlugin", 1, group)
    lastNode.setScriptName("Constant3")
    lastNode.setLabel("Constant3")
    lastNode.setPosition(2668, 1177)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.3, 0.5, 0.2)
    groupConstant3 = lastNode

    param = lastNode.getParam("NatronParamFormatChoice")
    if param is not None:
        param.set("PC_Video")
        del param

    param = lastNode.getParam("NatronOfxParamProcessR")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("NatronOfxParamProcessG")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("NatronOfxParamProcessB")
    if param is not None:
        param.setValue(False)
        del param

    del lastNode
    # End of node "Constant3"

    # Start of node "Dot21"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot21")
    lastNode.setLabel("Dot21")
    lastNode.setPosition(1277, 1450)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot21 = lastNode

    del lastNode
    # End of node "Dot21"

    # Now that all nodes are created we can connect them together, restore expressions
    groupDot1.connectInput(0, groupimg)
    groupSharpen1.connectInput(0, groupDot2)
    groupDot2.connectInput(0, groupDot5)
    groupMerge1.connectInput(0, groupDot4)
    groupMerge1.connectInput(1, groupDot11)
    groupDot4.connectInput(0, groupDot2)
    groupSwitch1.connectInput(0, groupSharpen1)
    groupSwitch1.connectInput(1, groupMerge1)
    groupDot5.connectInput(0, groupLog2Lin1)
    groupMerge2.connectInput(0, groupDot6)
    groupMerge2.connectInput(1, groupDot8)
    groupDot6.connectInput(0, groupDot5)
    groupBlur1.connectInput(0, groupDot7)
    groupDot7.connectInput(0, groupDot6)
    groupDot8.connectInput(0, groupBlur1)
    groupMultiply1.connectInput(0, groupMerge2)
    groupBlur2.connectInput(0, groupMultiply1)
    groupMerge3.connectInput(0, groupBlur2)
    groupMerge3.connectInput(1, groupDot10)
    groupGrade1.connectInput(0, groupDot9)
    groupDot9.connectInput(0, groupDot7)
    groupDot10.connectInput(0, groupGrade1)
    groupDot11.connectInput(0, groupMerge3)
    groupKeyMix1.connectInput(0, groupSwitch1)
    groupKeyMix1.connectInput(1, groupDot12)
    groupKeyMix1.connectInput(2, groupDot16)
    groupDot12.connectInput(0, groupDot13)
    groupDot13.connectInput(0, groupDot2)
    groupEdgeDetect1.connectInput(0, groupBlur4)
    groupDot14.connectInput(0, groupDot1)
    groupDot15.connectInput(0, groupDot14)
    groupBlur3.connectInput(0, groupErodeSmooth2)
    groupInvert1.connectInput(0, groupBlur3)
    groupDot16.connectInput(0, groupConstant3)
    groupSwitch2.connectInput(0, groupLog2Lin2)
    groupSwitch2.connectInput(1, groupDot17)
    groupDot17.connectInput(0, groupDot16)
    groupKeyMix2.connectInput(0, groupSwitch2)
    groupKeyMix2.connectInput(1, groupDot19)
    groupKeyMix2.connectInput(2, groupDot20)
    groupDot18.connectInput(0, groupDot15)
    groupDot19.connectInput(0, groupDot18)
    groupOutput1.connectInput(0, groupKeyMix2)
    groupInvert2.connectInput(0, groupMerge4)
    groupDot20.connectInput(0, groupInvert2)
    groupGrade2.connectInput(0, groupEdgeDetect1)
    groupErodeSmooth2.connectInput(0, groupGrade2)
    groupBlur4.connectInput(0, groupDot15)
    groupLog2Lin1.connectInput(0, groupDot1)
    groupLog2Lin2.connectInput(0, groupKeyMix1)
    groupConstant1.connectInput(0, groupDot3)
    groupDot3.connectInput(0, groupDot12)
    groupMerge4.connectInput(0, groupmask)
    groupMerge4.connectInput(1, groupDot21)
    groupConstant3.connectInput(0, groupInvert1)
    groupDot21.connectInput(0, groupConstant1)

    param = groupSharpen1.getParam("amount")
    param.setExpression("thisGroup.sharpamount.get()", False, 0)
    del param
    param = groupSharpen1.getParam("size")
    param.setExpression("thisGroup.sharpradius.get()", False, 0)
    param.setExpression("thisGroup.sharpradius.get()", False, 1)
    del param
    param = groupSharpen1.getParam("filter")
    group.getParam("Sharpen1filter").setAsAlias(param)
    del param
    param = groupSwitch1.getParam("which")
    param.setExpression("thisGroup.sharpchoice.get()", False, 0)
    del param
    param = groupBlur1.getParam("size")
    param.setExpression("thisGroup.sharpradius.get()", False, 0)
    param.setExpression("thisGroup.sharpradius.get()", False, 1)
    del param
    param = groupMultiply1.getParam("value")
    param.setExpression("thisGroup.sharpamount.get()", False, 0)
    param.setExpression("thisGroup.sharpamount.get()", False, 1)
    param.setExpression("thisGroup.sharpamount.get()", False, 2)
    param.setExpression("thisGroup.sharpamount.get()", False, 3)
    del param
    param = groupBlur2.getParam("size")
    param.setExpression("thisGroup.hpblur.get()", False, 0)
    param.setExpression("thisGroup.hpblur.get()", False, 1)
    del param
    param = groupKeyMix1.getParam("disableNode")
    param.setExpression("1-thisGroup.actedge.get()", False, 0)
    del param
    param = groupBlur3.getParam("size")
    param.setExpression("thisGroup.postblur.get()", False, 0)
    param.setExpression("thisGroup.postblur.get()", False, 1)
    del param
    param = groupInvert1.getParam("disableNode")
    param.setExpression("thisGroup.invedge.get()", False, 0)
    del param
    param = groupSwitch2.getParam("which")
    param.setExpression("thisGroup.prevedge.get()", False, 0)
    del param
    param = groupInvert2.getParam("disableNode")
    param.setExpression("1-thisGroup.invmask.get()", False, 0)
    del param
    param = groupGrade2.getParam("blackPoint")
    param.setExpression("thisGroup.thresedge.get()*.1", False, 0)
    param.setExpression("thisGroup.thresedge.get()*.1", False, 1)
    param.setExpression("thisGroup.thresedge.get()*.1", False, 2)
    param.setExpression("thisGroup.thresedge.get()*.1", False, 3)
    del param
    param = groupErodeSmooth2.getParam("size")
    param.setExpression("thisGroup.erodeedge.get()", False, 0)
    param.setExpression("thisGroup.erodeedge.get()", False, 1)
    del param
    param = groupBlur4.getParam("size")
    param.setExpression("thisGroup.preblur.get()", False, 0)
    param.setExpression("thisGroup.preblur.get()", False, 1)
    del param
    param = groupLog2Lin1.getParam("disableNode")
    param.setExpression("thisGroup.logswitch.get()", False, 0)
    del param
    param = groupLog2Lin2.getParam("disableNode")
    param.setExpression("thisGroup.Log2Lin1.disableNode.get()", False, 0)
    del param

    try:
        extModule = sys.modules["lp_logSharpenExt"]
    except KeyError:
        extModule = None
    if extModule is not None and hasattr(extModule ,"createInstanceExt") and hasattr(extModule.createInstanceExt,"__call__"):
        extModule.createInstanceExt(app,group)
